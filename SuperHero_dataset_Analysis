{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Test-UnifyGroup-Anass.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "15ZGET8xSrWP"
      },
      "source": [
        "# Test - Super Hero Dataset\n",
        "Prepared by Anass El Houd - Started: Sunday, september 27, 2020.\n",
        "To-do list at the end."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TwJGwG9AzJ9H"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 420,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yU_AkYDEzmuQ"
      },
      "source": [
        "df=pd.read_csv('/content/data_for_test.csv')"
      ],
      "execution_count": 421,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GqlxGlyrzq_Z",
        "outputId": "d7ac3542-4e29-4950-cdf4-2eb21ad75276",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 928
        }
      },
      "source": [
        "df"
      ],
      "execution_count": 422,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>real_name</th>\n",
              "      <th>full_name</th>\n",
              "      <th>overall_score</th>\n",
              "      <th>history_text</th>\n",
              "      <th>intelligence_score</th>\n",
              "      <th>strength_score</th>\n",
              "      <th>speed_score</th>\n",
              "      <th>durability_score</th>\n",
              "      <th>power_score</th>\n",
              "      <th>combat_score</th>\n",
              "      <th>creator</th>\n",
              "      <th>gender</th>\n",
              "      <th>type_race</th>\n",
              "      <th>height</th>\n",
              "      <th>weight</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3-D Man</td>\n",
              "      <td>Delroy Garrett, Jr.</td>\n",
              "      <td>Delroy Garrett, Jr.</td>\n",
              "      <td>6</td>\n",
              "      <td>Delroy Garrett, Jr. grew up to become a track ...</td>\n",
              "      <td>85</td>\n",
              "      <td>30</td>\n",
              "      <td>60</td>\n",
              "      <td>60</td>\n",
              "      <td>40</td>\n",
              "      <td>70</td>\n",
              "      <td>Marvel Comics</td>\n",
              "      <td>Male</td>\n",
              "      <td>Human</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>514A (Gotham)</td>\n",
              "      <td>Bruce Wayne</td>\n",
              "      <td>NaN</td>\n",
              "      <td>10</td>\n",
              "      <td>He was one of the many prisoners of Indian Hil...</td>\n",
              "      <td>100</td>\n",
              "      <td>20</td>\n",
              "      <td>30</td>\n",
              "      <td>50</td>\n",
              "      <td>35</td>\n",
              "      <td>100</td>\n",
              "      <td>DC Comics</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>A-Bomb</td>\n",
              "      <td>Richard Milhouse Jones</td>\n",
              "      <td>Richard Milhouse Jones</td>\n",
              "      <td>20</td>\n",
              "      <td>Richard \"Rick\" Jones was orphaned at a young ...</td>\n",
              "      <td>80</td>\n",
              "      <td>100</td>\n",
              "      <td>80</td>\n",
              "      <td>100</td>\n",
              "      <td>100</td>\n",
              "      <td>80</td>\n",
              "      <td>Marvel Comics</td>\n",
              "      <td>Male</td>\n",
              "      <td>Human</td>\n",
              "      <td>6'8 • 203 cm</td>\n",
              "      <td>980 lb • 441 kg</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Aa</td>\n",
              "      <td>Aa</td>\n",
              "      <td>NaN</td>\n",
              "      <td>12</td>\n",
              "      <td>Aa is one of the more passive members of the P...</td>\n",
              "      <td>80</td>\n",
              "      <td>50</td>\n",
              "      <td>55</td>\n",
              "      <td>45</td>\n",
              "      <td>100</td>\n",
              "      <td>55</td>\n",
              "      <td>DC Comics</td>\n",
              "      <td>Male</td>\n",
              "      <td>Human</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Aaron Cash</td>\n",
              "      <td>Aaron Cash</td>\n",
              "      <td>Aaron Cash</td>\n",
              "      <td>5</td>\n",
              "      <td>Aaron Cash is the head of security at Arkham A...</td>\n",
              "      <td>80</td>\n",
              "      <td>10</td>\n",
              "      <td>25</td>\n",
              "      <td>40</td>\n",
              "      <td>30</td>\n",
              "      <td>50</td>\n",
              "      <td>DC Comics</td>\n",
              "      <td>Male</td>\n",
              "      <td>Human</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1445</th>\n",
              "      <td>Zatanna</td>\n",
              "      <td>Zatanna Zatara</td>\n",
              "      <td>Zatanna Zatara</td>\n",
              "      <td>10</td>\n",
              "      <td>Zatanna is the daughter of adventurer John Zat...</td>\n",
              "      <td>90</td>\n",
              "      <td>10</td>\n",
              "      <td>25</td>\n",
              "      <td>30</td>\n",
              "      <td>100</td>\n",
              "      <td>55</td>\n",
              "      <td>DC Comics</td>\n",
              "      <td>Female</td>\n",
              "      <td>Human</td>\n",
              "      <td>5'7 • 170 cm</td>\n",
              "      <td>127 lb • 57 kg</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1446</th>\n",
              "      <td>Zero</td>\n",
              "      <td>DWN-∞: Zero</td>\n",
              "      <td>DWN-∞: Zero</td>\n",
              "      <td>18</td>\n",
              "      <td>Zero was created by the late Dr. Albert Wily ...</td>\n",
              "      <td>80</td>\n",
              "      <td>100</td>\n",
              "      <td>100</td>\n",
              "      <td>100</td>\n",
              "      <td>100</td>\n",
              "      <td>80</td>\n",
              "      <td>Capcom</td>\n",
              "      <td>Male</td>\n",
              "      <td>Robot</td>\n",
              "      <td>5'6 • 168 cm</td>\n",
              "      <td>145 lb • 65 kg</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1447</th>\n",
              "      <td>Zoom (New 52)</td>\n",
              "      <td>Hunter Zolomon</td>\n",
              "      <td>NaN</td>\n",
              "      <td>20</td>\n",
              "      <td>Hunter Zolomon is better known as Zoom, a spee...</td>\n",
              "      <td>95</td>\n",
              "      <td>50</td>\n",
              "      <td>100</td>\n",
              "      <td>75</td>\n",
              "      <td>100</td>\n",
              "      <td>80</td>\n",
              "      <td>DC Comics</td>\n",
              "      <td>Male</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6'1 • 185 cm</td>\n",
              "      <td>181 lb • 81 kg</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1448</th>\n",
              "      <td>Zoom</td>\n",
              "      <td>Hunter Zolomon</td>\n",
              "      <td>Hunter Zolomon</td>\n",
              "      <td>9</td>\n",
              "      <td>Hunter Zolomon had a troubled relationship wi...</td>\n",
              "      <td>75</td>\n",
              "      <td>10</td>\n",
              "      <td>100</td>\n",
              "      <td>30</td>\n",
              "      <td>100</td>\n",
              "      <td>30</td>\n",
              "      <td>DC Comics</td>\n",
              "      <td>Male</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6'1 • 185 cm</td>\n",
              "      <td>181 lb • 81 kg</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1449</th>\n",
              "      <td>Zzzax</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5</td>\n",
              "      <td>Zzzax was the product of an accident that occu...</td>\n",
              "      <td>45</td>\n",
              "      <td>80</td>\n",
              "      <td>75</td>\n",
              "      <td>95</td>\n",
              "      <td>80</td>\n",
              "      <td>50</td>\n",
              "      <td>Marvel Comics</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>40'0 • 12.2 meters</td>\n",
              "      <td>-</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1450 rows × 16 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "               name  ...           weight\n",
              "0           3-D Man  ...                -\n",
              "1     514A (Gotham)  ...                -\n",
              "2            A-Bomb  ...  980 lb • 441 kg\n",
              "3                Aa  ...                -\n",
              "4        Aaron Cash  ...                -\n",
              "...             ...  ...              ...\n",
              "1445        Zatanna  ...   127 lb • 57 kg\n",
              "1446           Zero  ...   145 lb • 65 kg\n",
              "1447  Zoom (New 52)  ...   181 lb • 81 kg\n",
              "1448           Zoom  ...   181 lb • 81 kg\n",
              "1449          Zzzax  ...                -\n",
              "\n",
              "[1450 rows x 16 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 422
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Vn7g9vWxTZbe"
      },
      "source": [
        "# Preprocessing "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QY3pfZbL5Yeh"
      },
      "source": [
        "### Numeric Variables"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zd0qUm5_aTnC"
      },
      "source": [
        "Extraire les infromations intéressantes des colonnes Height et Weight. Je transforme tous en cm et kg (J'ai l'habitude d'utiliser le kg et cm depuis le primaire :) ).\n",
        "![Explication-Anass-Test](https://i.ibb.co/PmPhVHB/Capture-d-e-cran-2020-09-26-a-15-48-32.png)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kXJFw0azlULf"
      },
      "source": [
        "df = df[pd.notnull(df['height'])]"
      ],
      "execution_count": 423,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AkxHhXYuXZ_Y",
        "outputId": "ab62fb8e-e4f9-4f01-8024-c9bd2450cb7e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 348
        }
      },
      "source": [
        "df['height']=df['height'].apply(lambda x: str(x).split(\"• \", maxsplit=1)[1] if '-' not in str(x) else x)\n",
        "df['height']=df['height'].apply(lambda x: str(x).replace('cm', '') if 'cm' in str(x) else x )\n",
        "df['height']=df['height'].apply(lambda x: float(str(x).replace('meters', ''))*1000 if 'meters' in str(x) else x )"
      ],
      "execution_count": 424,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zHyff6npmvU1"
      },
      "source": [
        "Il nous reste les cases remplies par '-'. Alors là, notre approche dépendera potentiellement du problème. Dans ce cas, on pourrait effectivement remplacer la case par la moyenne de la population (height of heroes). Ou bien, les supprimer définitivement.\n",
        "Pour le problème qu'on cherche à résoudre, on remarque que la distribution des hauteurs est très large. L'utilisation de la moyenne dans ce cas pourrait vraisemblablement biaiser le modèle prédictif."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YnVfv-VJmuAB",
        "outputId": "409ef129-9815-4259-95be-ee4db84c986f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 331
        }
      },
      "source": [
        "df['height']=df['height'].apply(lambda x: str(x).replace('-',str(np.NaN)) if '-' in str(x) else x )\n",
        "df['height']=df['height'].apply(lambda x: float(x))\n",
        "df.dropna(subset = ['height'], inplace=True)"
      ],
      "execution_count": 425,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CEFET0tCpt6Y",
        "outputId": "240c71fe-bc28-40b8-8dec-c53415364ecf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 225
        }
      },
      "source": [
        "df['height']"
      ],
      "execution_count": 426,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2         203.0\n",
              "6         191.0\n",
              "7         185.0\n",
              "8         203.0\n",
              "9         183.0\n",
              "         ...   \n",
              "1445      170.0\n",
              "1446      168.0\n",
              "1447      185.0\n",
              "1448      185.0\n",
              "1449    12200.0\n",
              "Name: height, Length: 1083, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 426
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BI0nOsQbr80F"
      },
      "source": [
        "On refait presque les mêmes étapes avec la colonne weight."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EcCF0lnkr8gO",
        "outputId": "ea1a3e69-db58-438e-e69b-9061fddb0681",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        }
      },
      "source": [
        "df['weight']=df['weight'].apply(lambda x: str(x).split(\"• \", maxsplit=1)[1] if '-' not in str(x) else x)\n",
        "df['weight']=df['weight'].apply(lambda x: str(x).replace('kg', '') if 'kg' in str(x) else x )\n",
        "df['weight']=df['weight'].apply(lambda x: str(x).replace(',', '') if ',' in str(x) else x)\n",
        "df['weight']=df['weight'].apply(lambda x: float(str(x).replace('tons', ''))*1000 if 'tons' in str(x) else x )"
      ],
      "execution_count": 427,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  after removing the cwd from sys.path.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WW_EUudHljBG",
        "outputId": "c782193e-75c2-4a9d-afc9-934b44c35c92",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 141
        }
      },
      "source": [
        "df['weight']=df['weight'].apply(lambda x: str(x).replace('-',str(np.NaN)) if '-' in str(x) else x )\n"
      ],
      "execution_count": 428,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RtC1mCUztDP_",
        "outputId": "52621401-47fd-48bc-94c8-cf69bc2759cc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 227
        }
      },
      "source": [
        "df['weight']=df['weight'].apply(lambda x: float(x))\n",
        "df.dropna(subset = ['weight'], inplace=True)"
      ],
      "execution_count": 429,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "07_MWrrZqIo3"
      },
      "source": [
        "Maintenant, on peut bien visualiser la distribution des hauteurs des héros.\n",
        "Commençons par l'écart type de la distribution du poids:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EuoVw_rH0mZf",
        "outputId": "3d99a110-6f38-4fb9-967b-c4d75a046339",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "np.std(df['weight'])"
      ],
      "execution_count": 430,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4229249.291327042"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 430
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kFUB_poY3Wiw"
      },
      "source": [
        "La distribution des poids est très étendue (STD très grand). Il va falloir prendre cela en considération si on opte pour les méthodes basées sur Gradient Descent. Dans ce cas, il faut passer par un scalling des valeurs de poids."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PlQu0b76MlD7"
      },
      "source": [
        "Passons aux autres variables numériques (tous les scores: intelligence_score + strength_score + speed_score + durability_score + power_score + combat_score + overall_score)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k2Y6YXy_095P",
        "outputId": "ba1e613c-8167-4dec-89ef-e953921fc4e5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        }
      },
      "source": [
        "from scipy.stats import norm\n",
        "sns.distplot(df['intelligence_score'],fit=norm)"
      ],
      "execution_count": 431,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7feaab73bfd0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 431
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zMY7W0WmNFXj",
        "outputId": "bd86edab-a4c1-4ccd-ac2b-e62ea2463d7d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 422
        }
      },
      "source": [
        "df['intelligence_score']=df['intelligence_score'].apply(lambda x: np.mean(df['intelligence_score'] ) if x==0 else x)\n",
        "sns.distplot(df['intelligence_score'],fit=norm)"
      ],
      "execution_count": 432,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7feaab6f5b70>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 432
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXoAAAEICAYAAABRSj9aAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO3deXgV5fn/8fd9TjYgEEIStgQIEHZERQqyRFDUulTQioLYlvpFQcWlX8vXpf7ESq2tS6tWaXFB6waIuBAUxQVFKcomyKbsyBLWEEISsp2c+/fHGWiIgZxAkpMz3K/rypU5M8/MuadjPxmemXlGVBVjjDHu5Ql1AcYYY2qWBb0xxricBb0xxricBb0xxricBb0xxricBb0xxrhcRDCNROQS4GnAC7yoqn8ttzwaeBU4B8gChqvqVhG5Hvi/Mk17AD1VdcXxvisxMVFTU1OrtBPGGHO6W7Zs2X5VTapomVR2H72IeIH1wEXADmAJcJ2qri3T5lagh6reLCIjgKtUdXi57ZwBvKeq7U/0fb169dKlS5cGsVvGGGOOEJFlqtqromXBdN30Bjaq6mZVLQamA0PLtRkKvOJMzwQGi4iUa3Ods64xxphaFEzQJwPby3ze4cyrsI2q+oAcIKFcm+HAtIq+QETGiMhSEVm6b9++YOo2xhgTpFq5GCsifYDDqrq6ouWq+ryq9lLVXklJFXYxGWOMOUnBBP1OoFWZzynOvArbiEgEEEfgouwRIzjO2bwxxpiaFUzQLwE6iEhbEYkiENoZ5dpkAKOc6WHAPHWu8oqIB7gW6583xpiQqPT2SlX1ichtwFwCt1e+pKprRGQisFRVM4ApwGsishE4QOCPwRHnAdtVdXP1l2+MMaYyld5eWdvs9kpjjKm6U7290hhjTBizoDfGGJcLaggEY4wJpamLtp1w+cg+rWupkvBkZ/TGGONyFvTGGONyFvTGGONyFvTGGONyFvTGGONydteNMeaUVHZHDNhdMaFmZ/TGGONyFvTGGONyFvTGGONyFvTGGONyFvTGGONyFvTGGONyFvTGGONyFvTGGONyFvTGGONyFvTGGONyFvTGGONyFvTGGONyFvTGGONyQQW9iFwiIutEZKOI3FvB8mgRedNZvkhEUsss6yEiX4vIGhFZJSIx1Ve+McaYylQa9CLiBSYBlwJdgetEpGu5ZqOBbFVNA54EHnXWjQBeB25W1W7AIKCk2qo3xhhTqWDO6HsDG1V1s6oWA9OBoeXaDAVecaZnAoNFRICLgZWq+h2Aqmapamn1lG6MMSYYwQR9MrC9zOcdzrwK26iqD8gBEoCOgIrIXBH5VkTurugLRGSMiCwVkaX79u2r6j4YY4w5gZq+GBsBDACud35fJSKDyzdS1edVtZeq9kpKSqrhkowx5vQSTNDvBFqV+ZzizKuwjdMvHwdkETj7/1JV96vqYWAO0PNUizbGGBO8YIJ+CdBBRNqKSBQwAsgo1yYDGOVMDwPmqaoCc4EzRKS+8wdgILC2eko3xhgTjEpfDq6qPhG5jUBoe4GXVHWNiEwElqpqBjAFeE1ENgIHCPwxQFWzReTvBP5YKDBHVT+ooX0xxhhTgUqDHkBV5xDodik7b0KZ6ULgmuOs+zqBWyyNMcaEgD0Za4wxLmdBb4wxLmdBb4wxLmdBb4wxLmdBb4wxLmdBb4wxLmdBb4wxLmdBb4wxLmdBb4wxLmdBb4wxLmdBb4wxLmdBb4wxLmdBb4wxLmdBb4wxLmdBb4wxLhfUePTGGON2UxdtO+HykX1a11Il1c/O6I0xxuUs6I0xxuUs6I0xxuUs6I0xxuUs6I0xxuWCCnoRuURE1onIRhG5t4Ll0SLyprN8kYikOvNTRaRARFY4P5Ort3xjjDGVqfT2ShHxApOAi4AdwBIRyVDVtWWajQayVTVNREYAjwLDnWWbVPWsaq7bGGNMkII5o+8NbFTVzapaDEwHhpZrMxR4xZmeCQwWEam+Mo0xxpysYII+Gdhe5vMOZ16FbVTVB+QACc6ytiKyXETmi0j6KdZrjDGmimr6ydhdQGtVzRKRc4D3RKSbqh4q20hExgBjAFq3Dt+nz4wxpi4K5ox+J9CqzOcUZ16FbUQkAogDslS1SFWzAFR1GbAJ6Fj+C1T1eVXtpaq9kpKSqr4XxhhjjiuYoF8CdBCRtiISBYwAMsq1yQBGOdPDgHmqqiKS5FzMRUTaAR2AzdVTujHGmGBU2nWjqj4RuQ2YC3iBl1R1jYhMBJaqagYwBXhNRDYCBwj8MQA4D5goIiWAH7hZVQ/UxI4YY4ypWFB99Ko6B5hTbt6EMtOFwDUVrPc28PYp1miMMeYU2JOxxhjjchb0xhjjchb0xhjjchb0xhjjchb0xhjjchb0xhjjchb0xhjjchb0xhjjchb0xhjjchb0xhjjchb0xhjjchb0xhjjchb0xhjjchb0xhjjchb0xhjjchb0xhjjchb0xhjjchb0xhjjchb0xhjjchb0xhjjchb0xhjjchb0xhjjchHBNBKRS4CnAS/woqr+tdzyaOBV4BwgCxiuqlvLLG8NrAX+qKpPVE/pxphwMXXRthMuH9mndS1VcnqqNOhFxAtMAi4CdgBLRCRDVdeWaTYayFbVNBEZATwKDC+z/O/Ah9VXtjGmulgIu18wXTe9gY2qullVi4HpwNBybYYCrzjTM4HBIiIAInIlsAVYUz0lG2OMqYpggj4Z2F7m8w5nXoVtVNUH5AAJIhIL3AM8dKIvEJExIrJURJbu27cv2NqNMcYEoaYvxv4ReFJV807USFWfV9VeqtorKSmphksyxpjTSzAXY3cCrcp8TnHmVdRmh4hEAHEELsr2AYaJyGNAY8AvIoWq+uwpV26MMSYowQT9EqCDiLQlEOgjgJHl2mQAo4CvgWHAPFVVIP1IAxH5I5BnIW+MMbWr0qBXVZ+I3AbMJXB75UuqukZEJgJLVTUDmAK8JiIbgQME/hgYY4ypA4K6j15V5wBzys2bUGa6ELimkm388STqM8YYc4rsyVhjjHE5C3pjjHE5C3pjjHG5oProjTEmnFU2zIPb2Rm9Mca4nAW9Mca4nAW9Mca4nPXRG2NqlaqSvTeTg/t2U1JSTHRMfbI7NiQ+Pj7UpbmWBb0xplZk7d7Jkk9n8cPSBeQezDpm2WuPQlpaGkOGDOHaa68lLi4uRFW6kwW9MaZGHc7NYd7Ml1n+5Ud4vRF0OKsP7bufQ0KLVkRFx1CQn0sLzWLevHn8/e9/54UXXmDs2LGMGjWKiAiLqOpg/ysaY2rMlrXLeXfyoxzOy6HPxVfR79JriG3c5CftRvZpzejRo1m3bh1PPvkkTzzxBB9//DF/+9vfSElJCUHl7mIXY40xNWLRx+/y+uP3US+2ITc9NImLrxtbYciX1alTJ/71r3/xxBNPsHXrVq655hqWLFlSSxW7l53RG2Oqlaoyb+bLLPzgTTqd058rx9xNVHRM0OuLCJdffjndunXj1ltv5cYbb+SX4x6gReeezFqxk5yCEqIiPKQ0rsdFXZvj9UgN7o072Bm9MaZaffHOKyz84E16DrqMYePur1LIl5WamsrUqVPp0KEDM/7xEJOmZrBudy71Ir0U+/x8uWE/s7/LJPDqC3MiFvTGmGrz4TvTWTB7GmeedwmXjboDj8d7Sttr3Lgx9/7lafwNm1O84GWGtvZxQ/+23DoojYEdk1i89QCfr9tbTdW7lwW9MeaUZecX89y091iS8W9KW5zB4vgL+PfCrRwqKDml7eYV+bh71ga8A8fSKL4JX7z0CAf37wHg4q7NOLtVYz79fi/zfthTHbvhWhb0xphTsnlfHk/N+g97PnuJRi3acvXN9zCgQzN+zDrMP7/YyM6DBSe1XVXl/727iq1Z+YxI78r1v3+YUl8Jbz0zkZKiQkSEX/ZMIaFBFI/PXY/fb104x2NBb4w5aQcPF/Pmoi1ELX2DetFR3DD+Ic5ok8Ql3ZszdmA7PCI8/+UmNuzJrfK231q2g/dWZHLn4I60S4wlsUUrrhp7L7u3beLjac8B4PUIF3Ruyve7DjF3ze7q3j3XsKA3xpwUVeUP766iaHkG/gPbGXLj74lLaHp0eYu4etwyqD2JsdG8vuhHth04HPS2N+zJZcKs1fRtl8BtF6Qdnd/hrD70vXQY334xh/XLvwHgzFaNaZfUgCc/tbP647GgN8aclLe/3clHn3yGd9OX9L7oSjqd3fcnbRrGRPLbfqk0jInklYVb2XOosNLtFhSXMm7qtzSIiuDpEWf95PbJQVf9hmat2zP7pb+Tl5ONR4TfXdiR9Xvy+GDVrmrbPzexoDfGVNnhYh9/eXcJ9b97i2at2zP42tHHbdswJpL/6d+WCI8wZcEWduecOOwnvr+G9XvyeHL4WTRt9NNbMyMio7hq7D0UFxYwe8rfUVV+cUYLOjaLZdLnG+12ywpY0Btjquz1b37k0OK3wVfIlWPuJiIy6oTtmzSIYnR6WzwCL3y1mR3ZP+3GKfUrE2evZdri7dwyqD3ndUw67vaSktsw+Nob2bhyMcvnf4jHI4we0JYfdueyeMuBU94/twkq6EXkEhFZJyIbReTeCpZHi8ibzvJFIpLqzO8tIiucn+9E5KrqLd8YU9vyi3xMevNDIrYv46Ybb6RpSmpQ6zVtGMOY89oTE+nhxa+28MnaPRwu9qGq7DlUyNjXlvHSf7ZwQ/9Uxl/cqdLt/ezCIbTp3IPPZkwhKyuLIWcmE1cvkle//vEU99B9Kg16EfECk4BLga7AdSLStVyz0UC2qqYBTwKPOvNXA71U9SzgEuA5EbFhF4wJYy/O/4HCb6bTPLkVN998c5XWbdIgijHntadDs1g+X7eXxz5ax5/nfE+fRz5j3g97eGhINx68oltQwxqICJf+5naKiwp5/PHHqRflZfjPWvHRmt2Vdg+dboI5o+8NbFTVzapaDEwHhpZrMxR4xZmeCQwWEVHVw6rqc+bHANZ5ZkwYyy/y8cLk5/AczuLRRx4mOjq6ytuIqxfJ9X3acMfgDvRIiaNri0Y8eEVX3r89nVH9Uqu0raSWrel76dXMmjWLxYsX8+tz2+BX5Y1FdlZfVjBBnwxsL/N5hzOvwjZOsOcACQAi0kdE1gCrgJvLBP9RIjJGRJaKyNJ9+/ZVfS+MMbXin7O/xvfDPM67+HJ69+59Sttq3iiGX/ZM4Zc9U7ihf1u6tmx0UttJv2IkycnJTJw4kWaxEQzu3JRpi7dR5Cs9pfrcpMYvxqrqIlXtBvwMuE9EfnIZXVWfV9VeqtorKen4F2CMMaFTUurntef+gTcymkcm3Bfqco6KjI7h/vvvZ9OmTbz66quM6pfK/rxiZn9nt1oeEUzQ7wRalfmc4syrsI3TBx8HHPOuMFX9HsgDup9sscaY0Hn6jfcp2bGaK4aPIiEhIdTlHOP8889n4MCBPPfcc3RL8NKpWUNe/Gqz3WrpCCbolwAdRKStiEQBI4CMcm0ygFHO9DBgnqqqs04EgIi0AToDW6ulcmNMrSkpKeHV557G2zCRP95VtQuwtWX8+PEUFBTwr3/9i9HpgVst/7Mxq/IVTwOVBr3Tp34bMBf4HpihqmtEZKKIDHGaTQESRGQjcBdw5BbMAcB3IrICeBe4VVX3V/dOGGNq1uOTX6XkQCa//O0txMRU/QJsbUhLS2PYsGFMnz6dsxoXkxgbzYsLNoe6rDohqFsdVXUOMKfcvAllpguBaypY7zXgtVOs0RgTQvn5+Uz793N4mqZx343XhrqcE7rtttuYPXs2zzz9FKOuvIO/fbL+pAZUcxt7MtYYc0J/m/Q8vsO5/HLUzdSLqtuPwSQmJnLTTTfx6aef0i1qPzGRHp7+bEOoywo5C3pjzHEV5B3iramvQcvu3DX8olCXE5RRo0bRtGlTpkx+lrHnteP9lbvYsj8/1GWFlAW9Mea4Pp/9JiVFhfz82huIb3Di8Wzqinr16nHzzTfz7bffckbEblrGxfDBykz8p/EdOBb0xpgK5R08wPLPMvCnnMXvrxkU6nKq5Oqrr6Zly5Y8989nuefSzmTmFPLtj9mhLitkLOiNMRWanzGN0lIfA4b8ilZN6oe6nCqJiorilltuYfXq1cRm/UCbJvX5cPVuduWc3GsNw50FvTHmJ3Ky9rJ8/hxKW/Vi/NUDQl3OSRk6dCitW7fm2WefZVjPZKIiPExZsOWELz/JLSzhQH4xOQUl+Er9tVhtzarbl9CNMSHxxXuvo6q0GXDVSY9BE2qRkZGMGzeOe+65h24/LGH0gN688NVmpizYwvmdkujaMo56kV72HCrkx6x8Vu3MYXv2f8/4G8ZEMKpvKi0b1wvhXlQPC3pjzDGydu9k5YJP8KX246JenUNdzim5/PLLef7555n/7quMPacfowe0Zfri7cxeuYvZK3ch/HdI3ZZxMVzctRmN6kVSUurni3X7eOGrzfz63Da0S4oN5W6cMgt6Y8wx5s96AzxeWvW7Iuz65svzer2MGzeOu+66izXfzOeMfhdwx+AO7M0tZG3mIXx+pUVcDC0b1yO+/rF3FXVq1pCXF27l3wu3MnZg+xDtQfWwPnpjzFEH9may9pvPKUnty+CzO4S6nGrx85//nKat2vLlrNfwlwaGLm7aMIZBnZpyYZdmdGsZ95OQB2hcP4qx6e2I8ApfrNtb22VXKwt6Y8xRC2ZPR8VDy96X0TaxQajLqRYej4eBV/6GA3syWfXNvCqtWz86gnPbJrA281BYP3RlQW+MAeDg/j2s/M+n+Nr04UKXnM0f0alnX5q1aseCjGlHz+qD1bd9Ah6P8MJX4TtAmgW9MQaABe+/iQJJvS6lfZI7zuaPEBHSh17PgT07Wb3oiyqt2zAmkp6tGzNz2Q725RbVTIE1zILeGMOh7P1899VcfK1/xoXndEKk8pdzh5vOPfvRNKUtCzKm4vdX7ax+QFoSJaV+Xv16a43UVtPsrhtjwtzURdtOuHxkn9aVbmPhBzPw+/3E97yUTs0aVldpdYp4PKQPvZ63Jz3MmkXzOaPvBUGvm9QwmgFpiby/che/v7hTDVZZM+yM3pjTXN7BAyz7Yg6+VudwQc/OrjybP6LLOf1JSknlq5M4q7+gc1O27M/nx6zwuyhrQW/Mae7rj2biL/XR4MxL6J4cF+pyapR4PKQPGUnWru2sXfxVldYd1KkpAF+s21cTpdUoC3pjTmPZ2dksnfcBvuSzGdSzKx4Xn80f0bVXOoktW/NVxhuoP/jxbNomNqBNQv2wvKfegt6Y09grr7yCr7iI6O4/5+zWjUNdTq0InNVfz/7MbaxdWsWz+o5JfL05i8KSqnX7hJoFvTGnqYMHD/Lqa6/ha9mD/j27Eek9feKga+90Elq04qtZVTurH9SpKYUlfhZtOVCD1VW/0+fIGmOO8frrr1Nw+DCerhfRp22TUJdTqzweL+lDRrJv5498v+w/Qa93brsEoiI8Ydd9E1TQi8glIrJORDaKyL0VLI8WkTed5YtEJNWZf5GILBORVc7v4O9nMsbUmNzcXF555VVKW3Tn3LPPICbSG+qSal23PgNJaJ5SpbP6elFe+rZLCLsLspUGvYh4gUnApUBX4DoR6Vqu2WggW1XTgCeBR535+4ErVPUMYBTwWnUVbow5eW+88QZ5ebnQ5WL6tU8IdTkh4fF4GTBkJHt3bGHd8q+DXm9gxyS27M9n58HweVtVMGf0vYGNqrpZVYuB6cDQcm2GAq840zOBwSIiqrpcVTOd+WuAeiISXR2FG2NOTn5+Pi+//G+0eVeGXXguDWMiQ11SyHTvM4gmzZL5ctYbaJAvD++VGg8QVu+gDSbok4HtZT7vcOZV2EZVfUAOUP404WrgW1UNz8EijHGJadOmcehQDiWdLmRMertQlxNSHq+XAUOuY8+2TawP8qy+S4tGxER6+Habu4L+lIlINwLdOWOPs3yMiCwVkaX79oVX35cx4eTw4cO89NLLSPPOXJLeh1SXDEV8Ks449wKaNGsZ9Fl9pNdDj+TGLN92sBaqqx7BBP1OoFWZzynOvArbiEgEEAdkOZ9TgHeB36jqpoq+QFWfV9VeqtorKSmpantgjAnajBkzyM4+QGGHC7npvNP7bP4Ij9fLgF9cx+4fN7JhxaKg1jm7dWPWZOaEzf30wQT9EqCDiLQVkShgBJBRrk0GgYutAMOAeaqqItIY+AC4V1WDv4fJGFPtCgsLefHFF4lo3pFe5/TkrFanxwNSwTij32Dik1rw5azXgzqrP7t1PCWlyprMQ7VQ3amrNOidPvfbgLnA98AMVV0jIhNFZIjTbAqQICIbgbuAI7dg3gakARNEZIXz07Ta98IYU6mZM2eSlZVFfvvBp33ffHker5cBV1zHrq0b2Pjd4krb93SeIl4eJv30QQ1TrKpzgDnl5k0oM10IXFPBeg8DD59ijcaYU1RUVMQLL7xATIsOtOzSgws62/lWeWf0G8xXs6fy5azXSTuz9wlH8WzaKIbkxvXCpp/enow15jTwzjvvsHfvXnJSz+em9HZ4PO4fvKyqvBERDPjFCDK3rGfTqqWVtu/ZJj5s7ryxoDfG5YqLi3nhhReIbZlGfNvuXHl2+bujzRE9+l9IXEIzvnyv8r76s1s1ZldOIbty6v6DUxb0xrjcrFmz2LVrF1mtB3FD/9TTcriDYHkjIhlwxQh2bv6BzauXnbBtzzaBB6fCofvGgt4YF/OVFDN58mTiktsTndyV6/u0CXVJdd6ZAy6iUZOkSu/A6dqiEVERHlZst6A3xoTQ8vkfkZmZyYHUCxjeuzXxDaJCXVKd542IpP8vhrNj4/dsWfPtcdtFRXjo0qIR31nQG2NCpaSokAWzp9G0XVd8iR0ZPaBtqEsKG2el/5xGTRIrfVq2R3Icq3fm4PcHN05OqFjQG+NSSz6bTV7OAbJSB3Npj5a0alI/1CWFjYjIKPpdNpztG9aw9fsVx23XIyWO/OJSNu/Pq8Xqqs6C3hgXKirIZ+EHb9KkXQ/yGraxB6ROwtnnXULDxgknvAOnR0rgwamVO3Jqs7Qqs6A3xoW+mfsuBfm5HGp/Ib3bNuFMG+6gyiKiouh3+XC2rV/Njz98V2GbtKax1Iv0WtAbY2rX4bxDfPPR2zTv8jNy67dkrA1edtJ6DryU2MZN+HLWGxUu93qE7smNWLmjbl+QtaA3xmUWzplBcVEBh9MuIik2mvM72XAHJysiKop+l13Ljz+sZNGiike27JHSmDWZh/CVBv+S8dpmQW+Mi+QezGLJpxm0OXMAezxNSO+QaMMdnKKegy6jUZMknnjiCfwVvFu2R0ocRT4/6/fU3QuyFvTGuMj8d1/DX+qjqNNFxEZHWN98NYiMimbQ1aNYvXo1H3744U+WH7kgu2pn3e2+saA3xiX27tjKii/n0nXAZWwprE+/9glEeu3/4tWhR9/BdO7cmSeffJLi4uJjlqUm1KdhTATf1eELsvZfgTEu8embLxBdrz5FHQYT6RV6t20S6pJcQzwexo8fz86dO5k6deqxy0TokRLHKgt6Y0xN2rR6GZtWLaXXpdeyZn8pvdo0oX5UUK+bMEHq378/AwYMYPLkyeTkHBvqPVIa88PuQxT56uarBS3ojQlzfn8pn05/gcZJzSlo1Re/Kv3TEkNdliuNHz+e3NxcJk2adMz8HslxlJQqP+zKDVFlJ2ZBb0yYW/HlXPbu2EL6Vb9lyfZcuifH0cQGL6sRnTp14pprrmHq1KmsX7/+6PwerY48IVs3L8ha0BsTxrKzs5n31ku06dSD3MRuFPn8pHews/madOeddxIbG8tf/vKXo0MjtIyLIaFBVJ19QtaC3pgw9vTTT1NYkM9F19/Kws0HaJvYgJR4G7ysJsXHx3P77bfzzTff8MknnwD/vSBrQW+MqVarV69mxowZ9L5wKHsknpyCEjubryXDhw+nU6dO/PWvf6WgIPAqwTNSGrNhby6Hi30hru6nLOiNCUN+v58//elPJCQkkD70V3y1YR9JDaPp2KxhqEs7LURERPCHP/yBXbt28dxzzwFwZkocfoU1mYdCXN1PBRX0InKJiKwTkY0icm8Fy6NF5E1n+SIRSXXmJ4jI5yKSJyLPVm/pxpy+ZsyYwcqVKwP3dufDrpxC0tMS8YgNd1BbevfuzZVXXsmUKVNYt24dZ6TEAXVzyOJKg15EvMAk4FKgK3CdiHQt12w0kK2qacCTwKPO/ELgAWB8tVVszGlu165dPPHEE5x77rkMGTKEBRv32XAHIXL33XfTqFEjJkyYQEL9SFrExdTJO2+COaPvDWxU1c2qWgxMB4aWazMUeMWZngkMFhFR1XxVXUAg8I0xp0hVeeihh/D7/UycOJH1e/JYvyfPhjsIkfj4eO677z5WrlzJ1KlT6+wTssH8l5EMbC/zeYczr8I2quoDcoCEYIsQkTEislRElu7bty/Y1Yw57bz//vvMnz+fO++8k1atWvHCV5ttuIMQu/zyy0lPT+epp54itV4xm/fnk1NQEuqyjlEnTgFU9XlV7aWqvZKSkkJdjjF1UlZWFo888ghnnnkmv/rVr9idU8isFTttuIMQExEefPBBABbNeBbUX+fO6oMJ+p1AqzKfU5x5FbYRkQggDsiqjgKNMYEumwceeID8/HwefvhhvF4v/164lVK/DXdQFyQnJ3PfffexbtVyIjd/xeKtB0Jd0jGCCfolQAcRaSsiUcAIIKNcmwxglDM9DJinx3ubrjGmyqZNm8bnn3/O+PHjSUtLI6/IxxuLfuTS7i1suIM64uqrr2bw4MFErv2QLxatCHU5x6g06J0+99uAucD3wAxVXSMiE0VkiNNsCpAgIhuBu4Cjt2CKyFbg78BvRWRHBXfsGGNOYMOGDTz22GOkp6fz61//GoA3l2wnt9DHjeltQ1ydOUJEmDhxItENYlk/ezI5eYdDXdJRQfXRq+ocVe2oqu1V9c/OvAmqmuFMF6rqNaqapqq9VXVzmXVTVbWJqsaqaoqqrq2ZXTHGfYqKihg/fjyxsbE88sgjiAglpX5eWrCF3qlNOLt1fKhLNGU0adKEUbffixzaxf0P/TnU5RxVJy7GGmMq9sgjj7B+/Xr+/Oc/k5gY6IvPWJHJzoMF3HReuxBXZypyw9WX4WsU0d4AABFfSURBVEsbyGfvv0NGRvle7tCwoDemjpoxYwYzZsxgzJgxDBw4EICSUj9Pf7aBbi0bMbhz0xBXaCoSVz+S9heMIDalEw8++CDr1q0LdUkW9MbURcuXL+fhhx8mPT2dO+644+j8mct2sO3AYX5/cUc8HhvuoK46t30SeWeNpGHDhtxxxx0cOhTa8W8s6I2pY/bu3csdd9xBixYtePzxx/F6vQAU+Up55rMNnNWqMed3srP5uqxP2yYUeBtwy71/IjMzk//93/+lpCR0D1FZ0BtTh+Tm5jJ27FgOHz7MM888Q1xc3NFl0xZtIzOnkPEXd0Js8LI67ciTytn1k3nooYdYuHAhDz74IKG669wepzOmjigqKuK2225j48aNTJ48mY4dOx5dtj+viCc/3UDfdgn0Twt6dBETIgmx0XRsFsuCDfuZetMvyczMZNKkSSQnJzNu3Lhar8eC3pg6oLS0lHvuuYfFixfz2GOP0b9//2OWP/LB9xwu9vGnK7vZ2XyYuKhrMybP30x2fjHjxo0jMzOTZ599lqSkJK699tparcW6bowJsdLSUiZMmMDcuXO55557uOKKK45ZvnDjft5ZvpOx57Unram9WCRcXNKtBaV+5dPv9yAiPPTQQ6Snp/Pggw8yc+bMWq3Fgt6YEPL5fNx3332888473Hrrrfz2t789Znl+kY/731tNm4T63HZBWmiKNCele3IjkhvXY+6a3QBERkbyzDPPkJ6ezgMPPFCrYW9dN8bUoKmLth13WanPx7K3/sHcuXP53e9+x9ixY49Z7vcrd81YwY9Z+bw+ug8xkd6aLtdUIxHh592a8/qiH8kr8hEbHUF0dDTPPPMMt99+Ow888ADFxcWMHDmyxmuxM3pjQqAwP4/pTz5wtLumfMgDPPXpeuau2cMfLutCPxuhMixd0r05xT4/X6zbe3TekbAfNGgQf/rTn3j88cfx+/01Woed0RtTyw7s2cn0px4ke28mV/zPXUR1ueAnZ/6LtmQxa0Um15yTwugBNnBZuDqnTTyJsVF8tHo3v+jR8uj8I2H/5z//mZdeeonMzEz+8pe/EBMTUyN1WNAbU4s2r/mWd/75CAC/+r+/0qZzj2OW+1X5cNUu/rMpi47NYnn4qu52l00Y83qEi7o2J2PFTg4X+455QUxERAQTJkygdevWPPbYY0RGRvLYY4/VSB0W9MbUglJfCZ+//QpffzSTxBatGH7nH2nS7Ng3cu48WMCHq3axeX8+fdsncFn3FkRHWL98uLu6ZzLTFm/jraU7GNUv9ZhlIsINN9xAcnLyMc9NVDcLemNq2P7Mbbz3/GPs2rqBnoMu46LrxhIVHfgnekmpn0378vj2x2xWZx6iXqSXq85O5mep9g5Yt+iV2oRz2sTzwlebub5PayIqeIn7xRdfXKM1WNAbU0MKCgqYN/Nlvv5wJtEx9Rh22wM079qb9fsL2HnwIJkHC9ialU9JqRId4eGCzk0ZkJZod9e40M0D23PTq0v5YNUuhp6VXPkK1cyC3phq5vf7+fjjj3ns8cfZlZlJYrf+RJ09lLf3RHJ4e2DIWo9As0Yx9GwdT5cWjWiX2KDCMz3jDoM7NyWtaSyT529myJkta/26iwW9MdVEVZkz92OeePIf7N62GW3UnOL+t7AzqT3NPDF0bVGP5Ph6JDeuR7NGMURasJ82PB5hzHntuHvmSub9sJfBXZrV6vdb0BvXOtHDSgAj+7Sulu/Jyc3lqSnTeP/dmeTt3Y6/QSKxA0Zx2WWXEuGNIDWxgYW64cqzkvnXF5v4w7ur+LB1fK2+1N2C3piTUOIr5c2P5jNt5iw2f/sllBQi8Sn0HDaOcb+5hnPbN8XjkUr/2JjTR1SEh2euO5tf/nMh49/6jimjetVaF44FvTktlPqVw8U+CkpK8ZUqPr+yemcOMZEeoiO8xER6iY70EOUN/JR9e1NhSSn784r4fvt+Pl/wNYu/XsjONYugIAf1RtKiy88YOfJ6fvOLgUTbhVRzAt2T47j/8i48mLGG577czM0D29fK91rQG1coKfWzO6eQHdkFbM8+zPYDh/ly/T4O5Bdz4HAJh4t8lH/lw+T5m467vQiByOJDlB74Ef/+H/Fkb8OT/SPiLwVvJM3SenD+RT/nlpFDaRrfqGZ3zrjKb/q24ZvNWfz1wx/YnVPIHy7rQlREzXbtBRX0InIJ8DTgBV5U1b+WWx4NvAqcA2QBw1V1q7PsPmA0UArcoapzq616UyepKoUlfnILS8gt8pFb6CO3sIS8wsB0ka8Uv8KSrQdQDTwNqkogiMu8gees1vEAHPnXbalfyS/ykVfkC2yryMeB/GJ2ZhewJ7ew7Kp4BOLqRdKkQRRdmjekUb1IYqMjqBfpJdIreD0e+rVvwsHcXPbv28feXTvZm7mDrN07OLB7Jwd2b6fgUDZeIMIbQaPmbWiZfjldzupNp25nEhEV6F+1kDdVJSL847qz+euHPzBlwRZWbD/I3T/vRN/2CTXWlVNp0IuIF5gEXATsAJaISIaqri3TbDSQrappIjICeBQYLiJdgRFAN6Al8KmIdFTV0urekYLiUjbtyyMhNor4+lFB3Ytc6ldKSv2UlPrxlSol/sBvX6lSXOrH5/dT4is734+IEOEVPCJ4PUKEJzAd4Q1MR3o9zo8QGRHoBoj0evDW8Rc5qypFPj+FJaUUlgR+F5SUklcUCOncQl+ZnxK+3ZZ9tN1/1/vvtL8a3pg2d+2eckX68aLERgkNIsFX4iPGqyRGC6kJQmykUN+rxFBMJCX4CgsoKiig6EA+xYUFHCg8TP6hg+QdPEB+TjYZudkUFhYe8xWNGjUiNTWVXuefR/fu3dnlbUqzVu2IiKy9C2fG/SK9Hh74RVd6to7n/vdWMfLFRaQm1OfG9Hb86tw21f59wZzR9wY2qupmABGZDgwFygb9UOCPzvRM4FkJ/GkaCkxX1SJgi4hsdLb3dfWU/18b9uYy9LHZRC18DoAjsXr0txw5WSxz9nhUuVSqMKSCSK4K3gcp5T6Ur6tK2z66klT4XSfaDz1uG3XOpKtWj6AcKShwEqIIggD14egfNpFj97XsCYuvVCv+LmffvJ4j/5xVfD4fPp8PgGLnByAX2FdpteDxRhBdrz4NGjUmNi6e5Pad+VmXVBITE0lKSiIlJYXU1FQaN258zFmVXUw1NenyHi0Y3KUpH67exbRF29m8L79GvieYoE8Gtpf5vAPoc7w2quoTkRwgwZn/Tbl1f/JYmIiMAcY4H/NEZF1Q1QckAvur0D4cuX0fQ7J/1fHah+uDb3pS+1iF7dfYNoJc/5SOYS3VeKrfUeP/nb4FPHjyqx/3nwJ14mKsqj4PPH8y64rIUlXtVc0l1Slu30e37x+4fx/dvn8Q3vsYzKXenUCrMp9TnHkVthGRCCCOwEXZYNY1xhhTg4IJ+iVABxFpKyJRBC6uZpRrkwGMcqaHAfNUVZ35I0QkWkTaAh2AxdVTujHGmGBU2nXj9LnfBswlcHvlS6q6RkQmAktVNQOYArzmXGw9QOCPAU67GQQu3PqAcTVwx81JdfmEGbfvo9v3D9y/j27fPwjjfRSt8O4NY4wxbmEjLRljjMtZ0BtjjMuFddCLyCUisk5ENorIvaGu51SJSCsR+VxE1orIGhG505nfREQ+EZENzu/4UNd6qkTEKyLLReR953NbEVnkHMs3nQv/YUlEGovITBH5QUS+F5G+bjuGIvK/zn+jq0VkmojEhPsxFJGXRGSviKwuM6/C4yYB/3D2daWI9Axd5ZUL26AvMzTDpUBX4DpnyIVw5gN+r6pdgXOBcc4+3Qt8pqodgM+cz+HuTuD7Mp8fBZ5U1TQgm8CwGuHqaeAjVe0MnElgP11zDEUkGbgD6KWq3QncpHFk6JNwPob/Bi4pN+94x+1SAncRdiDwsOe/aqnGkxK2QU+ZoRlUtRg4MjRD2FLVXar6rTOdSyAgkgns1ytOs1eAK0NTYfUQkRTgcuBF57MAF/Dfh1XDdh9FJA44j8CdaKhqsaoexGXHkMAde/Wc52bqA7sI82Ooql8SuGuwrOMdt6HAqxrwDdBYRFrUTqVVF85BX9HQDLX/1t0aIiKpwNnAIqCZqu5yFu0Gavc9ZNXvKeBuwO98TgAOqqrP+RzOx7ItgeF3Xna6pl4UkQa46Biq6k7gCWAbgYDPAZbhnmNY1vGOW1jlTzgHvWuJSCzwNvA7VT1UdpnzIFrY3hMrIr8A9qrqslDXUkMigJ7Av1T1bCCfct00LjiG8QTOaNsSGJW2AT/t8nCdcD5u4Rz0rhxeQUQiCYT8G6r6jjN7z5F/Fjq/94aqvmrQHxgiIlsJdLddQKBPu7HTDQDhfSx3ADtUdZHzeSaB4HfTMbwQ2KKq+1S1BHiHwHF1yzEs63jHLazyJ5yDPpihGcKK01c9BfheVf9eZlHZISZGAbNqu7bqoqr3qWqKqqYSOGbzVPV64HMCw2dAGO+jqu4GtotIJ2fWYAJPhrvmGBLosjlXROo7/80e2UdXHMNyjnfcMoDfOHffnAvklOniqXtUNWx/gMuA9cAm4P5Q11MN+zOAwD8NVwIrnJ/LCPRhfwZsAD4FmoS61mra30HA+850OwLjIG0kMFprdKjrO4X9OgtY6hzH94B4tx1D4CHgB2A18BoQHe7HEJhG4JpDCYF/mY0+3nEj8JqFSU72rCJwB1LI9+F4PzYEgjHGuFw4d90YY4wJggW9Mca4nAW9Mca4nAW9Mca4nAW9Mca4nAW9Mca4nAW9CSkRWRhEm9+JSP0g2n0hIr2c6a0ikhjsdxjjZhb0JqRUtV8QzX5HYITEmvyOsOcM3W3MT1jQm5ASkTzn9yDnjPzICzvecB4vv4PAwFmfi8jnTtuLReRrEflWRN5yBoEL5js8IvJPZ/ufiMgcERnmLDtHROaLyDIRmVtmfJMvRORREVksIutFJN2Z7xWRJ5wXb6wUkdtPtJ3j1HWHBF4ys1JEpjvzYkXkZRFZ5cy/2pl/nTNvtYg8WnbfRORvIvId0FdEfuXUukJEnrPwN0B4D4FgP+H/A+Q5vwcRGO42hcAJyNfAAGfZViDRmU4EvgQaOJ/vASY401/gPIpebp0j3zEMmONsvzmBl2MMAyKBhUCS02448FKZbf7Nmb4M+NSZvoXAgGURzucmJ9rOcfY9E2eYAKCx8/tR4KkybeIJ/KHbBiQRGB1zHnCls1yBa53pLsBsINL5/E/gN6E+xvYT+p8jI80ZUxcsVtUdACKyAkgFFpRrcy6BN4r9JzCeFlEE/igEYwDwlqr6gd1H/oUAdAK6A5842/QSGPPkiCOjiC5zaoLACI6T1Rl/XVUPiEj3SrZT3krgDRF5j8CYOEe2O+JIA1XNFpHzgC9UdR+AiLxB4OUm7wGlBEY7hcDgYucAS5zvr0d4j5JpqokFvalLispMl1Lxf58CfKKq11Xj9wqwRlX7VlLX8WoKdjvlXU4gsK8A7heRM4Jcr6xCVS0t8/2vqOp9J7Ed42LWR2/CQS7Q0Jn+BugvImkAItJARDoGuZ3/AFc7ffXNCHQXAawDkkSkr7PNSBHpVsm2PgHGHhl/XUSaVGU7IuIBWqnq5wS6n+KAWGe748q0iycwIuRAEUl0+tyvA+ZXsNnPgGEi0vRITSLSppL9MKcBC3oTDp4HPhKRz53ui98C00RkJYFum85BbudtAsPPrgVeB74lMI54MYG++kedi5orgMru1HmRQL/5SmedkVXcjhd4XURWAcuBf2jg3bIPA/HORdfvgPM1MM75vQTGe/8OWKaqPxnrXVXXAv8P+Nj53+YToM6+x9TUHhum2JxWRCRWVfNEJIHAmXJ/DbwsxBjXsj56c7p5X0QaE7iI+ycLeXM6sDN6Y2qYiEwi8E7Vsp5W1ZdDUY85/VjQG2OMy9nFWGOMcTkLemOMcTkLemOMcTkLemOMcbn/D1+iRl5+/bT8AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7O53xZVxNTRW"
      },
      "source": [
        "\n",
        "Cool, s'approche bien d'une distribution gaussienne (normale)!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4hRPm3MXNzzM"
      },
      "source": [
        "Passons à **strength_score**:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NE0BvftWNoCe",
        "outputId": "212f6739-972f-4162-9f29-a2cd7f38d016",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        }
      },
      "source": [
        "from scipy.stats import norm\n",
        "sns.distplot(df['strength_score'],fit=norm)"
      ],
      "execution_count": 433,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7feaab612dd8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 433
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bJuk-FSI5mWR"
      },
      "source": [
        "### Categorical Variables"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JXkm1x3QVHyu"
      },
      "source": [
        "We visualize the distribution of gender (categorical variable):"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3RwnThPl7BY1"
      },
      "source": [
        "def dist_categorical(X,Y):\n",
        "  fig, (ax1, ax2) = plt.subplots(1, 2)\n",
        "  fig.suptitle('Horizontally stacked subplots')\n",
        "  ax1.plt.pie(x, autopct='%1.0f%%')\n",
        "  ax2.plt(x, autopct='%1.0f%%')"
      ],
      "execution_count": 434,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y0kyFOfnVA1g",
        "outputId": "5f4355f2-fcb1-4be3-df82-7337d6691553",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 415
        }
      },
      "source": [
        "df.dropna(subset = ['gender'], inplace=True)\n",
        "df['gender'].value_counts().plot.bar()"
      ],
      "execution_count": 435,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7feaab5d0d68>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 435
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAESCAYAAAAG+ZUXAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAARRklEQVR4nO3df6yeZX3H8fdHKuh0Wn4cG9bWFWeDYT9EdsQSl23auAhulj+UwH7QkS7dH8xpXLJ1+2O6uB+YLDJJNrJmqGVxKnNDOmU4UnXGbTAPyhBExpHYtQ3QI0JViCj63R/PVX1a257ntOc5D736fiVPnuu67us59/eE009vrl73fVJVSJL68oxJFyBJWnyGuyR1yHCXpA4Z7pLUIcNdkjq0bNIFAJxxxhm1Zs2aSZchSceVO+6446tVNXWoY0+LcF+zZg0zMzOTLkOSjitJdh7umMsyktQhw12SOmS4S1KHDHdJ6pDhLkkdMtwlqUOGuyR1yHCXpA4Z7pLUoafFHarHizVbPjbpErrylateN+kSpG7Ne+We5Owkdw69vp7kLUlOS3Jrkvvb+6ltfpJck2Q2yV1Jzhv/tyFJGjZvuFfVfVV1blWdC/ws8ARwI7AF2FFVa4EdrQ9wIbC2vTYD146jcEnS4S10zX098OWq2glsALa18W3Axa29Abi+Bm4Dlic5c1GqlSSNZKHhfinwgdZeUVUPtvZDwIrWXgnsGvrM7jZ2gCSbk8wkmZmbm1tgGZKkIxk53JOcDLwe+MeDj1VVAbWQE1fV1qqarqrpqalDPo5YknSUFnLlfiHwuap6uPUf3r/c0t73tvE9wOqhz61qY5KkJbKQcL+MHyzJAGwHNrb2RuCmofHL266ZdcC+oeUbSdISGGmfe5LnAK8Bfnto+CrghiSbgJ3AJW38ZuAiYJbBzporFq1aSdJIRgr3qnocOP2gsUcY7J45eG4BVy5KdZKko+LjBySpQ4a7JHXIcJekDhnuktQhw12SOmS4S1KHDHdJ6pDhLkkdMtwlqUOGuyR1yHCXpA4Z7pLUIcNdkjpkuEtShwx3SeqQ4S5JHTLcJalDhrskdchwl6QOGe6S1KGRwj3J8iQfTvKlJPcmuSDJaUluTXJ/ez+1zU2Sa5LMJrkryXnj/RYkSQcb9cr93cAtVfUS4KXAvcAWYEdVrQV2tD7AhcDa9toMXLuoFUuS5jVvuCd5PvDzwHUAVfXtqnoM2ABsa9O2ARe39gbg+hq4DVie5MxFr1ySdFijXLmfBcwB703y+SR/l+Q5wIqqerDNeQhY0dorgV1Dn9/dxg6QZHOSmSQzc3NzR/8dSJJ+yCjhvgw4D7i2ql4GPM4PlmAAqKoCaiEnrqqtVTVdVdNTU1ML+agkaR6jhPtuYHdV3d76H2YQ9g/vX25p73vb8T3A6qHPr2pjkqQlMm+4V9VDwK4kZ7eh9cAXge3Axja2EbiptbcDl7ddM+uAfUPLN5KkJbBsxHlvAt6f5GTgAeAKBn8x3JBkE7ATuKTNvRm4CJgFnmhzJUlLaKRwr6o7gelDHFp/iLkFXHmMdUmSjoF3qEpShwx3SeqQ4S5JHTLcJalDhrskdchwl6QOGe6S1CHDXZI6ZLhLUocMd0nqkOEuSR0y3CWpQ4a7JHXIcJekDhnuktQhw12SOmS4S1KHDHdJ6pDhLkkdMtwlqUMjhXuSryT5QpI7k8y0sdOS3Jrk/vZ+ahtPkmuSzCa5K8l54/wGJEk/bCFX7q+qqnOrarr1twA7qmotsKP1AS4E1rbXZuDaxSpWkjSaY1mW2QBsa+1twMVD49fXwG3A8iRnHsN5JEkLNGq4F/BvSe5IsrmNraiqB1v7IWBFa68Edg19dncbO0CSzUlmkszMzc0dRemSpMNZNuK8n6uqPUleANya5EvDB6uqktRCTlxVW4GtANPT0wv6rCTpyEa6cq+qPe19L3AjcD7w8P7llva+t03fA6we+viqNiZJWiLzhnuS5yT50f1t4JeAu4HtwMY2bSNwU2tvBy5vu2bWAfuGlm8kSUtglGWZFcCNSfbP/4equiXJZ4EbkmwCdgKXtPk3AxcBs8ATwBWLXrUk6YjmDfeqegB46SHGHwHWH2K8gCsXpTpJ0lHxDlVJ6pDhLkkdMtwlqUOGuyR1yHCXpA4Z7pLUIcNdkjpkuEtShwx3SeqQ4S5JHTLcJalDhrskdchwl6QOGe6S1CHDXZI6ZLhLUocMd0nqkOEuSR0y3CWpQ4a7JHVo5HBPclKSzyf5aOufleT2JLNJPpTk5DZ+SuvPtuNrxlO6JOlwFnLl/mbg3qH+O4Grq+rFwKPApja+CXi0jV/d5kmSltBI4Z5kFfA64O9aP8CrgQ+3KduAi1t7Q+vTjq9v8yVJS2TUK/e/An4f+F7rnw48VlVPtf5uYGVrrwR2AbTj+9r8AyTZnGQmyczc3NxRli9JOpR5wz3JLwN7q+qOxTxxVW2tqumqmp6amlrMLy1JJ7xlI8x5JfD6JBcBzwKeB7wbWJ5kWbs6XwXsafP3AKuB3UmWAc8HHln0yiVJhzXvlXtV/WFVraqqNcClwCeq6teATwJvaNM2Aje19vbWpx3/RFXVolYtSTqiY9nn/gfAW5PMMlhTv66NXwec3sbfCmw5thIlSQs1yrLM91XVp4BPtfYDwPmHmPMt4I2LUJsk6Sh5h6okdchwl6QOGe6S1CHDXZI6ZLhLUocMd0nqkOEuSR0y3CWpQ4a7JHXIcJekDhnuktQhw12SOmS4S1KHDHdJ6pDhLkkdMtwlqUOGuyR1yHCXpA4Z7pLUIcNdkjo0b7gneVaS/07yP0nuSfInbfysJLcnmU3yoSQnt/FTWn+2HV8z3m9BknSwUa7cnwReXVUvBc4FXptkHfBO4OqqejHwKLCpzd8EPNrGr27zJElLaN5wr4Fvtu4z26uAVwMfbuPbgItbe0Pr046vT5JFq1iSNK+R1tyTnJTkTmAvcCvwZeCxqnqqTdkNrGztlcAugHZ8H3D6Ib7m5iQzSWbm5uaO7buQJB1gpHCvqu9W1bnAKuB84CXHeuKq2lpV01U1PTU1daxfTpI0ZEG7ZarqMeCTwAXA8iTL2qFVwJ7W3gOsBmjHnw88sijVSpJGMspumakky1v72cBrgHsZhPwb2rSNwE2tvb31acc/UVW1mEVLko5s2fxTOBPYluQkBn8Z3FBVH03yReCDSf4U+DxwXZt/HfD3SWaBrwGXjqFuSdIRzBvuVXUX8LJDjD/AYP394PFvAW9clOokSUfFO1QlqUOGuyR1yHCXpA4Z7pLUIcNdkjo0ylZISU9za7Z8bNIldOUrV71u0iUcM6/cJalDhrskdchwl6QOGe6S1CHDXZI6ZLhLUocMd0nqkOEuSR0y3CWpQ4a7JHXIcJekDhnuktQhw12SOmS4S1KH5g33JKuTfDLJF5Pck+TNbfy0JLcmub+9n9rGk+SaJLNJ7kpy3ri/CUnSgUa5cn8K+L2qOgdYB1yZ5BxgC7CjqtYCO1of4EJgbXttBq5d9KolSUc0b7hX1YNV9bnW/gZwL7AS2ABsa9O2ARe39gbg+hq4DVie5MxFr1ySdFgLWnNPsgZ4GXA7sKKqHmyHHgJWtPZKYNfQx3a3sYO/1uYkM0lm5ubmFli2JOlIRg73JM8F/gl4S1V9ffhYVRVQCzlxVW2tqumqmp6amlrIRyVJ8xgp3JM8k0Gwv7+q/rkNP7x/uaW9723je4DVQx9f1cYkSUtklN0yAa4D7q2qdw0d2g5sbO2NwE1D45e3XTPrgH1DyzeSpCWwbIQ5rwR+A/hCkjvb2B8BVwE3JNkE7AQuacduBi4CZoEngCsWtWJJ0rzmDfeq+gyQwxxef4j5BVx5jHVJko6Bd6hKUocMd0nqkOEuSR0y3CWpQ4a7JHXIcJekDhnuktQhw12SOmS4S1KHDHdJ6pDhLkkdMtwlqUOGuyR1yHCXpA4Z7pLUIcNdkjpkuEtShwx3SeqQ4S5JHTLcJalD84Z7kvck2Zvk7qGx05LcmuT+9n5qG0+Sa5LMJrkryXnjLF6SdGijXLm/D3jtQWNbgB1VtRbY0foAFwJr22szcO3ilClJWoh5w72qPg187aDhDcC21t4GXDw0fn0N3AYsT3LmYhUrSRrN0a65r6iqB1v7IWBFa68Edg3N293GfkiSzUlmkszMzc0dZRmSpEM55n9QraoC6ig+t7Wqpqtqempq6ljLkCQNOdpwf3j/ckt739vG9wCrh+atamOSpCV0tOG+HdjY2huBm4bGL2+7ZtYB+4aWbyRJS2TZfBOSfAD4ReCMJLuBtwFXATck2QTsBC5p028GLgJmgSeAK8ZQsyRpHvOGe1VddphD6w8xt4Arj7UoSdKx8Q5VSeqQ4S5JHTLcJalDhrskdchwl6QOGe6S1CHDXZI6ZLhLUocMd0nqkOEuSR0y3CWpQ4a7JHXIcJekDhnuktQhw12SOmS4S1KHDHdJ6pDhLkkdMtwlqUOGuyR1aCzhnuS1Se5LMptkyzjOIUk6vEUP9yQnAX8NXAicA1yW5JzFPo8k6fDGceV+PjBbVQ9U1beBDwIbxnAeSdJhLBvD11wJ7Brq7wZecfCkJJuBza37zST3jaGWE9UZwFcnXcR88s5JV6AJ8Gdzcf344Q6MI9xHUlVbga2TOn/PksxU1fSk65AO5s/m0hnHssweYPVQf1UbkyQtkXGE+2eBtUnOSnIycCmwfQznkSQdxqIvy1TVU0l+B/g4cBLwnqq6Z7HPoyNyuUtPV/5sLpFU1aRrkCQtMu9QlaQOGe6S1CHDXZI6ZLh3JMmzk5w96TokTZ7h3okkvwLcCdzS+ucmcQuqJi4Dv57kj1v/hUnOn3RdvTPc+/F2Bs/1eQygqu4EzppkQVLzN8AFwGWt/w0GDxfUGE3s8QNadN+pqn1Jhsfc56qng1dU1XlJPg9QVY+2Gxw1RoZ7P+5J8qvASUnWAr8L/OeEa5IAvtMeBV4ASaaA7022pP65LNOPNwE/CTwJfAD4OvCWiVYkDVwD3Ai8IMmfAZ8B/nyyJfXPO1QljV2SlwDrgQA7qureCZfUPcP9OJfkXzjC2npVvX4Jy5G+L8lpRzpeVV9bqlpORK65H//+ctIFSIdxB4MLj+F/5d/fL+BFkyjqROGVuyR1yCv3TrQdMn/B4JeSP2v/eFV5daSJS3IqsJYDfzY/PbmK+me49+O9wNuAq4FXAVfgbig9DST5LeDNDH4r253AOuC/gFdPsq7e+Ye/H8+uqh0Mltp2VtXbgddNuCYJBsH+cmBnVb0KeBntTmqNj1fu/XgyyTOA+9tvwtoDPHfCNUkA36qqbyUhySlV9SUfcDd+hns/3gz8CIM7U9/B4H95N060Imlgd5LlwEeAW5M8CuyccE3dc7eMpCWT5BeA5wO3VNW3J11Pzwz349x8j/X1JiY9HbTdMqsZWi2oqs9NrqL+uSxz/LsA2MXgeTK3c+ANI9LEJXkH8JvAA/zggWGFu2XGyiv341x72t5rGDwr+2eAjwEfqKp7JlqY1CS5D/hpl2GWllshj3NV9d2quqWqNjLYPzwLfKrtmJGeDu4Glk+6iBONV+4dSHIKgz3tlwFrgO3Ae6pqzyTrkgCSTAM3MQj5J/eP++9B42W4H+eSXA/8FHAz8MGqunvCJUkHSHIP8LfAFxj6JR1V9e8TK+oEYLgf55J8D3i8dYf/Ywaoqnre0lcl/UCSz1bVyyddx4nGcJc0VknexWA5ZjsHLsu4FXKMDHdJY5Xkk4cYrqpyK+QYGe6S1CG3QkoaqyQrklyX5F9b/5wkmyZdV+8Md0nj9j7g48CPtf7/Am+ZWDUnCMNd0ridUVU30LZBVtVTwHcnW1L/DHdJ4/Z4ktNpW3WTrAP2Tbak/vngMEnj9lYG2yB/Isl/AFPAGyZbUv/cLSNpLJK8sKr+r7WXAWczuLnuvqr6zkSLOwG4LCNpXD4y1P5QVd1TVXcb7EvDcJc0LsO/W+BFE6viBGW4SxqXOkxbS8A1d0ljkeS7DB5qF+DZwBP7D+FD7cbOcJekDrksI0kdMtwlqUOGuyR1yHCXpA79P0xHb0uK8sV7AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6tkw6lvB6jUG",
        "outputId": "b355c493-6aa2-423d-8c33-8869285d1cff",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        }
      },
      "source": [
        "df['gender'].value_counts().plot.pie(subplots=True,autopct='%1.0f%%')"
      ],
      "execution_count": 436,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([<matplotlib.axes._subplots.AxesSubplot object at 0x7feaab54bcc0>],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 436
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sc2y7KIjMM-w"
      },
      "source": [
        "Passons à notre deuxième variable catégorielle:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e5xR8AVMWMun",
        "outputId": "8b6013e1-c331-455e-8141-5aeb52cf0ae4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 501
        }
      },
      "source": [
        "df['creator'].value_counts()"
      ],
      "execution_count": 437,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Marvel Comics          426\n",
              "DC Comics              323\n",
              "Shueisha                32\n",
              "Lego                    20\n",
              "Dark Horse Comics       19\n",
              "Ubisoft                  9\n",
              "George Lucas             8\n",
              "Image Comics             5\n",
              "Capcom                   5\n",
              "Team Epic TV             5\n",
              "Mortal Kombat            3\n",
              "Wildstorm                3\n",
              "Nintendo                 3\n",
              "IDW Publishing           2\n",
              "Sony Pictures            2\n",
              "Hasbro                   2\n",
              "George R. R. Martin      2\n",
              "J. K. Rowling            2\n",
              "Star Trek                2\n",
              "J. R. R. Tolkien         1\n",
              "Disney                   1\n",
              "Sega                     1\n",
              "Matt Groening            1\n",
              "Konami                   1\n",
              "Clive Barker             1\n",
              "Cartoon Network          1\n",
              "Stephen King             1\n",
              "Name: creator, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 437
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "24A_z5yvArzQ",
        "outputId": "6b3f8bd3-08d6-4fdb-d0ab-1b69e28f8d8e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "print('Pourcentage Héro Marvel Comics: ',np.round(df['creator'].value_counts('Percentage')[0]*100,3))\n",
        "print('Pourcentage DC Comics: ',np.round(df['creator'].value_counts('Percentage')[1]*100,3))\n",
        "print('Pourcentage de tout le reste: ',np.round(df['creator'].value_counts('Percentage')[2:].sum()*100,3))"
      ],
      "execution_count": 438,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Pourcentage Héro Marvel Comics:  48.354\n",
            "Pourcentage DC Comics:  36.663\n",
            "Pourcentage de tout le reste:  14.983\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uvTGc5NW5yxZ"
      },
      "source": [
        "On remarque que Marvel Comics et Dc Comics prend la grande partie des données. Le reste des boites créatrices font un tout petit pourcentage.\n",
        "Par conséquent, je pense rassembler le reste dans une même sous-ensemble noté \"Autres\".\n",
        "Cela nous permet d'avoir uniquement trois catégories plus ou moins équilibré au lieu de 27 avec un pourcentage d'apparition très faible de quelques catégories."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "K2gHMQykEMKP",
        "outputId": "ef18793e-ae76-4176-8922-b29a1f632a11",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 141
        }
      },
      "source": [
        "df['creator']=df['creator'].apply(lambda x: x if (x=='Marvel Comics' or x=='DC Comics') else 'Autres' )"
      ],
      "execution_count": 439,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o4OImlnQEqff",
        "outputId": "fdac91cc-2f79-410f-a438-69f775222955",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 86
        }
      },
      "source": [
        "df['creator'].value_counts()"
      ],
      "execution_count": 440,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Marvel Comics    426\n",
              "DC Comics        323\n",
              "Autres           227\n",
              "Name: creator, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 440
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h-0Z0XRVO5X4"
      },
      "source": [
        "Passons à une autre variable catégorielle:\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hooCcFEIO4nC",
        "outputId": "3e47b737-4b12-41ec-c59a-bf3db8634827",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "df['type_race'].value_counts()"
      ],
      "execution_count": 441,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Human                 422\n",
              "Mutant                 79\n",
              "Metahuman              37\n",
              "Alien                  24\n",
              "God / Eternal          20\n",
              "Animal                 20\n",
              "Demon                  17\n",
              "Human / Radiation      16\n",
              "Asgardian              14\n",
              "Inhuman                11\n",
              "Android                11\n",
              "Kryptonian             10\n",
              "Atlantean               9\n",
              "Human / Altered         9\n",
              "Cyborg                  9\n",
              "New God                 9\n",
              "Symbiote                8\n",
              "Vampire                 5\n",
              "Demi-God                5\n",
              "Robot                   5\n",
              "Amazon                  4\n",
              "Titanian                3\n",
              "Human-Inhuman           2\n",
              "Tamaranean              2\n",
              "Mutant / Clone          2\n",
              "Gorilla                 2\n",
              "Saiyan                  2\n",
              "Eternal                 2\n",
              "Frost Giant             2\n",
              "Clone                   2\n",
              "Elder                   2\n",
              "Zombie                  2\n",
              "Bolovaxian              1\n",
              "Zen-Whoberian           1\n",
              "Human-Spartoi           1\n",
              "Flora Colossus          1\n",
              "Yautja                  1\n",
              "Bizarro                 1\n",
              "Daxamite                1\n",
              "Dathomirian Zabrak      1\n",
              "Icthyo Sapien           1\n",
              "Human-Vulcan            1\n",
              "Cosmic Entity           1\n",
              "Kakarantharaian         1\n",
              "Yoda's species          1\n",
              "Martian                 1\n",
              "Strontian               1\n",
              "Czarnian                1\n",
              "Kaiju                   1\n",
              "Ungaran                 1\n",
              "Xenomorph XX121         1\n",
              "Elf                     1\n",
              "Kree                    1\n",
              "Talokite                1\n",
              "Leprechaun              1\n",
              "Korugaran               1\n",
              "Name: type_race, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 441
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5l4ZJawBRbEW"
      },
      "source": [
        "En se basant sur le nombre d'apparition des catégories. J'ai pensé mettre tous les catégories qui apparaissent une seule fois dans une même catégorie \"Autres\". Cela permettera également de ne pas biaiser le modèle par ce déséquilibre. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3hETl9V8TyNN"
      },
      "source": [
        "counts = df['type_race'].value_counts()\n",
        "new_df = df.loc[df['type_race'].isin(counts.index[counts>1])]\n",
        "tokeep=new_df['type_race'].unique()"
      ],
      "execution_count": 442,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-s-tqgiXWnnF",
        "outputId": "100b5c56-f359-4e6b-ead4-43dd38b1267e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 141
        }
      },
      "source": [
        "df['type_race']=df['type_race'].apply(lambda x: x if x in tokeep else 'Autres' )"
      ],
      "execution_count": 443,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "267dlua1UvAp",
        "outputId": "e0a4a09d-dfc6-4d21-9863-b9c968389bb3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 605
        }
      },
      "source": [
        "df['type_race'].value_counts()"
      ],
      "execution_count": 444,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Human                422\n",
              "Autres               209\n",
              "Mutant                79\n",
              "Metahuman             37\n",
              "Alien                 24\n",
              "Animal                20\n",
              "God / Eternal         20\n",
              "Demon                 17\n",
              "Human / Radiation     16\n",
              "Asgardian             14\n",
              "Android               11\n",
              "Inhuman               11\n",
              "Kryptonian            10\n",
              "Atlantean              9\n",
              "Cyborg                 9\n",
              "Human / Altered        9\n",
              "New God                9\n",
              "Symbiote               8\n",
              "Robot                  5\n",
              "Vampire                5\n",
              "Demi-God               5\n",
              "Amazon                 4\n",
              "Titanian               3\n",
              "Frost Giant            2\n",
              "Zombie                 2\n",
              "Elder                  2\n",
              "Gorilla                2\n",
              "Saiyan                 2\n",
              "Tamaranean             2\n",
              "Clone                  2\n",
              "Human-Inhuman          2\n",
              "Mutant / Clone         2\n",
              "Eternal                2\n",
              "Name: type_race, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 444
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T2PdCfjNVuqX"
      },
      "source": [
        "## Visualization"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "in5uk7zagABg"
      },
      "source": [
        "Commençons par des simples requêtes pour visualiser note dataset.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UChJ7wgOkaFn"
      },
      "source": [
        "Cherchons le superhéro le  plus puissant à tous égards (qui a le overall score le plus élevé):"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QbqM1v4Jf_rg",
        "outputId": "d70bdfa3-8f19-424c-9c56-010aa5f43629",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 78
        }
      },
      "source": [
        "df[['name','overall_score']].sort_values('overall_score',ascending=False).head(1)"
      ],
      "execution_count": 445,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>overall_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>882</th>\n",
              "      <td>Michael Demiurgos</td>\n",
              "      <td>∞</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                  name overall_score\n",
              "882  Michael Demiurgos             ∞"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 445
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "edQt6zVTAkhj"
      },
      "source": [
        "La moyenne du score d'intelligence de tous les héros de **Marvel Comics**:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ytcmH-30Lm1W",
        "outputId": "090f6869-e9ff-4f20-fb24-7f98a4d5c6ee",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "df.groupby(\"creator\")['intelligence_score'].mean()[0]"
      ],
      "execution_count": 446,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "84.07058884863021"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 446
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RpPqx62RO_rS"
      },
      "source": [
        "La moyenne du score d'intelligence en fonction du sexe (gendre):"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "10_dUK5lPLRe",
        "outputId": "cbbc6ef2-9c19-459a-b1f8-acdb61e810d7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 86
        }
      },
      "source": [
        "df.groupby(\"gender\")['intelligence_score'].mean()"
      ],
      "execution_count": 447,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "gender\n",
              "Female    85.072609\n",
              "Male      84.960884\n",
              "Name: intelligence_score, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 447
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "s-if7OZqmJ4t"
      },
      "source": [
        "Cherchons le superhéro qui le plus intelligent avec la plut petite taille:\n",
        "(`on dit bien que les plus intelligents ont de petites tailles 😁 `)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r9p9jHirmJRw",
        "outputId": "94254e31-343d-471d-a5b0-1575fa0dc6e8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 78
        }
      },
      "source": [
        "df[['name','intelligence_score','height']].sort_values(['intelligence_score','height'],ascending=(False,True)).head(1)"
      ],
      "execution_count": 448,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>intelligence_score</th>\n",
              "      <th>height</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1293</th>\n",
              "      <td>The Overlord</td>\n",
              "      <td>100.0</td>\n",
              "      <td>99.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "              name  intelligence_score  height\n",
              "1293  The Overlord               100.0    99.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 448
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "khj94vXpqvWD"
      },
      "source": [
        "Notre superohero The Overlord, 99cm avec un score d'intelligence de 100. On peut vérifier la corrélation de l'intelligence et la hauteur après."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fNubB16am_G1"
      },
      "source": [
        "Le superhero le plus grand en terme de hauteur et poids:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HGi6kWHcmJYR",
        "outputId": "374eba00-2667-4189-a7e1-dbcd6c1a0565",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 78
        }
      },
      "source": [
        "df[['name','height','weight']].sort_values(['height','weight'],ascending=(False,False)).head(1)"
      ],
      "execution_count": 449,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>height</th>\n",
              "      <th>weight</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1161</th>\n",
              "      <td>Shin Godzilla</td>\n",
              "      <td>118500.0</td>\n",
              "      <td>91271400.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "               name    height      weight\n",
              "1161  Shin Godzilla  118500.0  91271400.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 449
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NlHuzunDsKvd"
      },
      "source": [
        "Okay, pas besoin de faire une remarque sur ces valeurs astronomiques! Le nom Godzilla est largement suffisant."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YXwBw1AhVxrz"
      },
      "source": [
        "Nous visualisons toutes les distributions et dispersions des corrélations entre les variables (numériques et catégorielles) et voyons si nous pouvons obtenir des observations.\n",
        "Je me contence de visualiser les distributions des scores dans un premier temps:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LH8_wDziVuKU",
        "outputId": "4e7f63f2-1f86-4b84-e01d-ffa5ed614322",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "sns.pairplot(df, y_vars=['intelligence_score', 'strength_score', 'speed_score','combat_score','durability_score','power_score'], x_vars=['intelligence_score', 'strength_score', 'speed_score','combat_score','durability_score','power_score'])"
      ],
      "execution_count": 450,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.PairGrid at 0x7feaab59ea20>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 450
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x1080 with 42 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fUe2-GKraVi7"
      },
      "source": [
        "On remarque qu'un seul héro qui a un score d'intelligence inférieur à 10 et qui a en même temps un un score de combat proche de 50.\n",
        "\n",
        "On remarque également que peu de héros avec de faibles scores de combat avaient un score de strength élevé.  C'est évident, parait-il :) "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UjIxHKU6z3UM",
        "outputId": "46089090-381a-46e3-d4f6-8a5c389f4f97",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 405
        }
      },
      "source": [
        "sns.pairplot(df, y_vars=['intelligence_score', 'height'], x_vars=['intelligence_score', 'height'])"
      ],
      "execution_count": 451,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.PairGrid at 0x7feaab521828>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 451
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 360x360 with 6 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c1Z6UCyB0IkO"
      },
      "source": [
        "Les valeurs aberrantes sont dues au présence des Hulks et Godzilla dans notre dataset. \n",
        "Pour pouvoir bien visualiser la relation entre la hateur et l'intelligence, on se contente du domaine de hauteur inférieur à 500cm/5m(bon c'est pas très normal comme hauteur, mais bon. Mutation effect + Marvel exaggeration :) )."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fjMu6uWc0IMO"
      },
      "source": [
        "df_normalheight=df[df['height']<500]"
      ],
      "execution_count": 452,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "48BJB47b2O3D",
        "outputId": "7841d34c-8aaa-432c-a9b8-0193d2406064",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 405
        }
      },
      "source": [
        "sns.pairplot(df_normalheight, y_vars=['intelligence_score', 'height'], x_vars=['intelligence_score', 'height'])"
      ],
      "execution_count": 453,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.PairGrid at 0x7feaab5210b8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 453
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 360x360 with 6 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M_h2MxFmSBL_"
      },
      "source": [
        "Une grande partie des héros ont une hauteur entre 1m et 3m (100cm et 300cm) avec un score d'intelligence entre 60 et 100. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i1juRuL6Y26f"
      },
      "source": [
        "Visualisons maintenant les différentes corrélations entre les variables"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W_hQ3y0bdL94",
        "outputId": "f6b619d9-70f7-4bbe-a763-cbdd37285a15",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 366
        }
      },
      "source": [
        "sns.heatmap(df.corr())"
      ],
      "execution_count": 454,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7feaaa2e6550>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 454
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v2spIyRLgq_d"
      },
      "source": [
        "## Implémentation des modèles"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IAUOLzu2guzf"
      },
      "source": [
        "Faisons au début une transformation de nos variables catégorielles. Je ne veux pas utiliser le one hot encoding parce que le nombre des catégories est grand (surtout pour le type race, ce qui entraînera une augmentation considérable du nombre de colonnes."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XOwme_PwgvLq",
        "outputId": "7da4b996-fc42-494d-e436-0717ed712ba3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 348
        }
      },
      "source": [
        "from sklearn.preprocessing import OneHotEncoder\n",
        "lb_enc= LabelEncoder()\n",
        "df['gender'] = lb_enc.fit_transform(df['gender'])\n",
        "df['creator'] = lb_enc.fit_transform((df['creator']))\n",
        "df['type_race'] = lb_enc.fit_transform((df['creator']))"
      ],
      "execution_count": 455,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  after removing the cwd from sys.path.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4Rogmn0Z-Ege"
      },
      "source": [
        "Essayons un truc, prédire  par exemple la race du héro (humain en se basant sur ses différents scores de superpower et les caracétistiques physiques.\n",
        "Préparons nos vecteurs X et Y pour l'entrainement du modèle. Je divise les données en une partie pour l'entrainement et une autre pour le test. 30% pour le test."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X522Nf9q7xkr"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "chosen_features = ['intelligence_score', 'strength_score', 'speed_score',\t'durability_score',\t'power_score','combat_score','creator','type_race','height','weight']\n",
        "X = df[chosen_features]\n",
        "y = df['gender']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state=10)"
      ],
      "execution_count": 456,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hYFTtgWGok5Y"
      },
      "source": [
        "Un random forest classifier permet de faire le job. Vérifions:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p3-213CM9xwV",
        "outputId": "6e60570e-5af7-45ec-fa00-2437a0d87461",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "rf = RandomForestClassifier()\n",
        "rf.fit(X_train,y_train)\n",
        "prediction = rf.predict(X_test)\n",
        "\n",
        "print('Accuracy: ',rf.score(X_test,y_test))"
      ],
      "execution_count": 457,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy:  0.8668941979522184\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YlaiqKpzFlU9",
        "outputId": "44c4bcfd-73bb-41b7-de5a-0edb80a92cc5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 173
        }
      },
      "source": [
        "from sklearn.metrics import classification_report\n",
        "target_names = ['Female', 'Male']\n",
        "print(classification_report(y_test,prediction,target_names=target_names))"
      ],
      "execution_count": 458,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "      Female       0.77      0.60      0.68        68\n",
            "        Male       0.89      0.95      0.92       225\n",
            "\n",
            "    accuracy                           0.87       293\n",
            "   macro avg       0.83      0.77      0.80       293\n",
            "weighted avg       0.86      0.87      0.86       293\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_P_LdpljGkem"
      },
      "source": [
        "Le f1-score est plutot faible. C'est du potentiellement au fait que les deux classes sont déséquilibrées, c'est une remaque issue de la visualisation qu'on avait déjà faite ci-dessus. On peut toujours optimiser notre classifier  par une classification en prenant en compte le poid de chaque label (classe)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WPnU0XkmpAS1"
      },
      "source": [
        "On remarque que l'utilisation d'un kNN classifier ne eprmet pas vraiment de gagner en présision. Voyons concrètement cela. En définissant la fonction suivante qui permet de déclarer un kNN classifier avec plusieurs choix de K."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SbYwKlGOo_3u"
      },
      "source": [
        "def knn_check(i):\n",
        "  knn = KNeighborsClassifier(n_neighbors=i)\n",
        "  knn.fit(X_train,y_train)\n",
        "  pred_i = knn.predict(X_test)\n",
        "  error.append(np.mean(pred_i != y_test))"
      ],
      "execution_count": 459,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oymvwInyq4CF",
        "outputId": "2c8b65ab-4785-4577-b291-07d2fba8ea6f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        }
      },
      "source": [
        "error=[]\n",
        "for i in range(10,300):\n",
        "  knn_check(i)\n",
        "\n",
        "plt.plot(range(10,300),error,color='blue', linestyle='dashed',markerfacecolor='red', markersize=10)\n"
      ],
      "execution_count": 460,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7feaaa18be10>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 460
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "52C_M4SsuRGR"
      },
      "source": [
        "Pour K proche de 220, on arrive seulement à une précision de 0,26. Random forest classifier fonctionne mieux dans ce cas."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5n_IOlA6_cFn"
      },
      "source": [
        "## Text Variables"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vWofEmKr9yPQ"
      },
      "source": [
        "Pour les variables texto:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F2r3ass39xJ3"
      },
      "source": [
        "import spacy\n",
        "from spacy import tokenizer\n",
        "import nltk\n",
        "import tensorflow\n",
        "\n",
        "nlp=spacy.load('en_core_web_sm')"
      ],
      "execution_count": 461,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PI4SwdGitDgF",
        "outputId": "4150e023-c2c9-46bc-e282-a31b2c6aa6fd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 225
        }
      },
      "source": [
        "df['history_text']"
      ],
      "execution_count": 462,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2        Richard \"Rick\" Jones was orphaned at a young ...\n",
              "6        Sapien began life as Langdon Everett Caul, a ...\n",
              "7        Originally a history professor on the planet ...\n",
              "8       Formerly known as Emil Blonsky, a spy of Sovie...\n",
              "9       \"Abra Kadabra\" was a criminal time traveler fr...\n",
              "                              ...                        \n",
              "1444    Zane was created by Dr. Julien in a small work...\n",
              "1445    Zatanna is the daughter of adventurer John Zat...\n",
              "1446     Zero was created by the late Dr. Albert Wily ...\n",
              "1447    Hunter Zolomon is better known as Zoom, a spee...\n",
              "1448     Hunter Zolomon had a troubled relationship wi...\n",
              "Name: history_text, Length: 976, dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 462
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KA0uBWMDvmjM"
      },
      "source": [
        "Dans un premier temps, on commence par rendre tout le texte en miniscule:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q8fDx_3juxjp",
        "outputId": "77b7d49c-22ea-45bd-bf2a-b1f48560465b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 141
        }
      },
      "source": [
        "df['history_text']=df['history_text'].str.lower()"
      ],
      "execution_count": 463,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I8eoZwg7z3QO"
      },
      "source": [
        "Supprimer également les ponctuations:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dzv6ScOCxLqQ"
      },
      "source": [
        "poncts=[',', '.', '\"', '!','/',';','(',':','%','-']\n",
        "def supp_ponc(x):\n",
        "    x = str(x)\n",
        "    for ponct in poncts:\n",
        "        x = x.replace(ponct,\"\")\n",
        "    return x"
      ],
      "execution_count": 464,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f98rGYrw0uQQ",
        "outputId": "5468484c-9163-41d0-eb92-d029915430a6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 141
        }
      },
      "source": [
        "df['history_text']=df['history_text'].apply(lambda x: supp_ponc(x))"
      ],
      "execution_count": 465,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rWPrKmYR1rGc"
      },
      "source": [
        "Spacy divise automatiquement le text en tokens lorsqu'un doc est créé à l'aide du modèle."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QwQ3TE5G5gts",
        "outputId": "cb7a9e1f-282f-4af2-c28c-1d5634afd307",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 141
        }
      },
      "source": [
        "df['history_text']=df['history_text'].apply(lambda x: nlp(x))"
      ],
      "execution_count": 466,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UNQL0ZteQq8g"
      },
      "source": [
        "Stemming est une étape importante avant l'élaboration du modèle. C'est une étape qui permet de ne pas différencier entre les mots du même racine en faisant des coupe basés sur quelques suffixes et préfixes fréquement utilisés.\n",
        "En conterpartie, lemmatisation réduit le mot à sa racine telle qu'elle apparaît dans le dictionnaire."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EpfsGZZ9Qsu0",
        "outputId": "ac85c976-c0ad-40d3-f0c6-687af8248027",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "for word in df['history_text'][2]:\n",
        "    print(word.text,  word.lemma_)"
      ],
      "execution_count": 472,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "   \n",
            "richard richard\n",
            "rick rick\n",
            "jones jones\n",
            "was be\n",
            "orphaned orphan\n",
            "at at\n",
            "a a\n",
            "young young\n",
            "age age\n",
            "and and\n",
            "after after\n",
            "being be\n",
            "expelled expel\n",
            "from from\n",
            "several several\n",
            "orphanages orphanage\n",
            "for for\n",
            "disciplinary disciplinary\n",
            "reasons reason\n",
            "he -PRON-\n",
            "was be\n",
            "placed place\n",
            "into into\n",
            "a a\n",
            "state state\n",
            "institution institution\n",
            "called call\n",
            "tempest temp\n",
            "town town\n",
            "a a\n",
            "troubled troubled\n",
            "and and\n",
            "rebellious rebellious\n",
            "youth youth\n",
            "jones jones\n",
            "soon soon\n",
            "came come\n",
            "to to\n",
            "the the\n",
            "attention attention\n",
            "of of\n",
            "the the\n",
            "institution institution\n",
            "'s 's\n",
            "chief chief\n",
            "administrator administrator\n",
            "who who\n",
            "smashed smash\n",
            "his -PRON-\n",
            "guitar guitar\n",
            "a a\n",
            "gift gift\n",
            "from from\n",
            "his -PRON-\n",
            "late late\n",
            "father father\n",
            "and and\n",
            "then then\n",
            "had have\n",
            "him -PRON-\n",
            "severely severely\n",
            "thrashed thrash\n",
            "soon soon\n",
            "afterward afterward\n",
            "jones jones\n",
            "ran run\n",
            "away away\n",
            "from from\n",
            "the the\n",
            "institution institution\n",
            "he -PRON-\n",
            "spent spend\n",
            "the the\n",
            "first first\n",
            "half half\n",
            "of of\n",
            "his -PRON-\n",
            "teens teen\n",
            "drifting drift\n",
            "from from\n",
            "town town\n",
            "to to\n",
            "town town\n",
            "throughout throughout\n",
            "the the\n",
            "southwest southwest\n",
            "trying try\n",
            "to to\n",
            "avoid avoid\n",
            "the the\n",
            "juvenile juvenile\n",
            "authorities authority\n",
            "and and\n",
            "doing do\n",
            "menial menial\n",
            "work work\n",
            "when when\n",
            "he -PRON-\n",
            "could could\n",
            "get get\n",
            "it -PRON-\n",
            "   \n",
            "at at\n",
            "age age\n",
            "16 16\n",
            "he -PRON-\n",
            "got get\n",
            "his -PRON-\n",
            "driver driver\n",
            "'s 's\n",
            "license license\n",
            "and and\n",
            "managed manage\n",
            "to to\n",
            "save save\n",
            "enough enough\n",
            "money money\n",
            "to to\n",
            "buy buy\n",
            "a a\n",
            "used use\n",
            "car car\n",
            "overhearing overhear\n",
            "a a\n",
            "teenager teenager\n",
            "dare dare\n",
            "a a\n",
            "friend friend\n",
            "to to\n",
            "ride ride\n",
            "out out\n",
            "with with\n",
            "him -PRON-\n",
            "on on\n",
            "the the\n",
            "desert desert\n",
            "where where\n",
            "it -PRON-\n",
            "was be\n",
            "rumored rumor\n",
            "an an\n",
            "atomic atomic\n",
            "bomb bomb\n",
            "was be\n",
            "going go\n",
            "to to\n",
            "be be\n",
            "tested test\n",
            "jones jones\n",
            "offered offer\n",
            "to to\n",
            "take take\n",
            "him -PRON-\n",
            "upon upon\n",
            "the the\n",
            "challenge challenge\n",
            "he -PRON-\n",
            "drove drive\n",
            "his -PRON-\n",
            "car car\n",
            "out out\n",
            "to to\n",
            "the the\n",
            "test test\n",
            "site site\n",
            "to to\n",
            "discover discover\n",
            "his -PRON-\n",
            "challenger challenger\n",
            "was be\n",
            "too too\n",
            "timid timid\n",
            "to to\n",
            "show show\n",
            "up up\n",
            "dr dr\n",
            "robert robert\n",
            "bruce bruce\n",
            "banner banner\n",
            "designer designer\n",
            "of of\n",
            "the the\n",
            "gamma gamma\n",
            "bomb bomb\n",
            "to to\n",
            "be be\n",
            "tested test\n",
            "learned learn\n",
            "that that\n",
            "someone someone\n",
            "had have\n",
            "ventured venture\n",
            "onto onto\n",
            "the the\n",
            "test test\n",
            "site site\n",
            "and and\n",
            "believing believe\n",
            "the the\n",
            "countdown countdown\n",
            "had have\n",
            "been be\n",
            "delayed delay\n",
            "ran run\n",
            "out out\n",
            "into into\n",
            "the the\n",
            "desert desert\n",
            "to to\n",
            "warn warn\n",
            "him -PRON-\n",
            "back back\n",
            "banner banner\n",
            "managed manage\n",
            "to to\n",
            "throw throw\n",
            "jones jones\n",
            "into into\n",
            "a a\n",
            "protective protective\n",
            "trench trench\n",
            "before before\n",
            "the the\n",
            "bomb bomb\n",
            "detonated detonate\n",
            "but but\n",
            "he -PRON-\n",
            "himself -PRON-\n",
            "was be\n",
            "bombarded bombard\n",
            "with with\n",
            "gamma gamma\n",
            "radiation radiation\n",
            "this this\n",
            "radiation radiation\n",
            "triggered trigger\n",
            "a a\n",
            "mutagenic mutagenic\n",
            "change change\n",
            "in in\n",
            "banner banner\n",
            "causing cause\n",
            "him -PRON-\n",
            "to to\n",
            "turn turn\n",
            "into into\n",
            "the the\n",
            "raging rage\n",
            "superhuman superhuman\n",
            "hulk hulk\n",
            "feeling feel\n",
            "responsible responsible\n",
            "for for\n",
            "banner banner\n",
            "'s 's\n",
            "condition condition\n",
            "and and\n",
            "being be\n",
            "the the\n",
            "only only\n",
            "person person\n",
            "to to\n",
            "know know\n",
            "that that\n",
            "the the\n",
            "rampaging rampaging\n",
            "brute brute\n",
            "was be\n",
            "actually actually\n",
            "banner banner\n",
            "jones jones\n",
            "became become\n",
            "the the\n",
            "hulk hulk\n",
            "'s 's\n",
            "sometimes sometimes\n",
            "unwanted unwanted\n",
            "companion companion\n",
            "and and\n",
            "ally ally\n",
            "jones jones\n",
            "soon soon\n",
            "organized organize\n",
            "the the\n",
            "teen teen\n",
            "brigade brigade\n",
            "a a\n",
            "group group\n",
            "of of\n",
            "young young\n",
            "amateur amateur\n",
            "ham ham\n",
            "radio radio\n",
            "enthusiasts enthusiast\n",
            "to to\n",
            "help help\n",
            "him -PRON-\n",
            "monitor monitor\n",
            "the the\n",
            "hulk hulk\n",
            "'s 's\n",
            "activities activity\n",
            "jones jones\n",
            "was be\n",
            "present present\n",
            "during during\n",
            "the the\n",
            "hulk hulk\n",
            "'s 's\n",
            "first first\n",
            "encounters encounter\n",
            "with with\n",
            "the the\n",
            "army army\n",
            "as as\n",
            "well well\n",
            "as as\n",
            "superhuman superhuman\n",
            "menaces menace\n",
            "as as\n",
            "the the\n",
            "gargoyle gargoyle\n",
            "the the\n",
            "alien alien\n",
            "toadmen toadmen\n",
            "the the\n",
            "ringmaster ringmaster\n",
            "tyrannus tyrannus\n",
            "and and\n",
            "the the\n",
            "metal metal\n",
            "master master\n",
            "and and\n",
            "even even\n",
            "a a\n",
            "runin runin\n",
            "with with\n",
            "the the\n",
            "fantastic fantastic\n",
            "four four\n",
            "   \n",
            "the the\n",
            "avengers avenger\n",
            "formed form\n",
            "due due\n",
            "to to\n",
            "rick rick\n",
            "'s 's\n",
            "radio radio\n",
            "broadcast broadcast\n",
            "warning warn\n",
            "about about\n",
            "the the\n",
            "hulk hulk\n",
            "he -PRON-\n",
            "temporarily temporarily\n",
            "became become\n",
            "a a\n",
            "sidekick sidekick\n",
            "for for\n",
            "captain captain\n",
            "america america\n",
            "his -PRON-\n",
            "resemblance resemblance\n",
            "to to\n",
            "bucky bucky\n",
            "was be\n",
            "noted note\n",
            "rick rick\n",
            "even even\n",
            "wore wear\n",
            "bucky bucky\n",
            "'s 's\n",
            "costume costume\n",
            "for for\n",
            "a a\n",
            "time time\n",
            "however however\n",
            "captain captain\n",
            "america america\n",
            "felt feel\n",
            "he -PRON-\n",
            "did do\n",
            "not not\n",
            "want want\n",
            "to to\n",
            "lose lose\n",
            "another another\n",
            "partner partner\n",
            "and and\n",
            "that that\n",
            "while while\n",
            "rick rick\n",
            "was be\n",
            "a a\n",
            "good good\n",
            "athlete athlete\n",
            "he -PRON-\n",
            "was be\n",
            "not not\n",
            "quite quite\n",
            "up up\n",
            "to to\n",
            "the the\n",
            "level level\n",
            "bucky bucky\n",
            "was be\n",
            "when when\n",
            "iron iron\n",
            "man man\n",
            "suggested suggest\n",
            "that that\n",
            "rick rick\n",
            "be be\n",
            "made make\n",
            "a a\n",
            "full full\n",
            "member member\n",
            "of of\n",
            "the the\n",
            "avengers avenger\n",
            "cap cap\n",
            "strongly strongly\n",
            "opposed oppose\n",
            "the the\n",
            "idea idea\n",
            "   \n",
            "the the\n",
            "kree kree\n",
            "hero hero\n",
            "captain captain\n",
            "marvell marvell\n",
            "was be\n",
            "bonded bond\n",
            "to to\n",
            "rick rick\n",
            "due due\n",
            "to to\n",
            "only only\n",
            "being be\n",
            "able able\n",
            "to to\n",
            "function function\n",
            "out out\n",
            "of of\n",
            "the the\n",
            "negative negative\n",
            "zone zone\n",
            "for for\n",
            "a a\n",
            "few few\n",
            "hours hour\n",
            "using use\n",
            "the the\n",
            "negative negative\n",
            "zone zone\n",
            "portal portal\n",
            "in in\n",
            "the the\n",
            "baxter baxter\n",
            "building building\n",
            "seemed seem\n",
            "to to\n",
            "remove remove\n",
            "that that\n",
            "limitation limitation\n",
            "shortly shortly\n",
            "after after\n",
            "rick rick\n",
            "and and\n",
            "marvell marvell\n",
            "had have\n",
            "to to\n",
            "be be\n",
            "remerged remerge\n",
            "eventually eventually\n",
            "they -PRON-\n",
            "were be\n",
            "separated separate\n",
            "   \n",
            "during during\n",
            "the the\n",
            "kreeskrull kreeskrull\n",
            "war war\n",
            "an an\n",
            "' '\n",
            "omniwave omniwave\n",
            "' '\n",
            "machine machine\n",
            "from from\n",
            "the the\n",
            "supreme supreme\n",
            "intelligence intelligence\n",
            "caused cause\n",
            "the the\n",
            "destiny destiny\n",
            "force force\n",
            "to to\n",
            "trigger trigger\n",
            "within within\n",
            "rick rick\n",
            "   \n",
            "an an\n",
            "attempt attempt\n",
            "to to\n",
            "cure cure\n",
            "the the\n",
            "hulk hulk\n",
            "instead instead\n",
            "gave give\n",
            "rick rick\n",
            "radiation radiation\n",
            "poisoning poisoning\n",
            "in in\n",
            "the the\n",
            "hospital hospital\n",
            "the the\n",
            "dire dire\n",
            "wraiths wraith\n",
            "began begin\n",
            "to to\n",
            "replace replace\n",
            "the the\n",
            "staff staff\n",
            "but but\n",
            "were be\n",
            "stopped stop\n",
            "by by\n",
            "rom rom\n",
            "rick rick\n",
            "assisted assist\n",
            "rom rom\n",
            "against against\n",
            "the the\n",
            "wraiths wraith\n",
            "and and\n",
            "temporarily temporarily\n",
            "lived live\n",
            "with with\n",
            "brandy brandy\n",
            "clark clark\n",
            "jones jones\n",
            "was be\n",
            "cured cure\n",
            "by by\n",
            "the the\n",
            "beyonder beyonder\n",
            "at at\n",
            "the the\n",
            "same same\n",
            "time time\n",
            "rom rom\n",
            "and and\n",
            "brandy brandy\n",
            "left leave\n",
            "for for\n",
            "galador galador\n",
            "   \n",
            "rick rick\n",
            "began begin\n",
            "dating date\n",
            "marlo marlo\n",
            "chandler chandler\n",
            "a a\n",
            "former former\n",
            "girlfriend girlfriend\n",
            "of of\n",
            "the the\n",
            "hulk hulk\n",
            "'s 's\n",
            "the the\n",
            "two two\n",
            "later later\n",
            "married marry\n",
            "with with\n",
            "a a\n",
            "great great\n",
            "number number\n",
            "of of\n",
            "heroes hero\n",
            "in in\n",
            "attendance attendance\n",
            "the the\n",
            "impossible impossible\n",
            "man man\n",
            "did do\n",
            "his -PRON-\n",
            "best good\n",
            "to to\n",
            "usurp usurp\n",
            "the the\n",
            "proceedings proceeding\n",
            "by by\n",
            "inviting invite\n",
            "the the\n",
            "kree kree\n",
            "skrulls skrull\n",
            "even even\n",
            "mephisto mephisto\n",
            "to to\n",
            "the the\n",
            "ceremony ceremony\n",
            "after after\n",
            "a a\n",
            "period period\n",
            "of of\n",
            "estrangement estrangement\n",
            "that that\n",
            "also also\n",
            "involved involve\n",
            "moondragon moondragon\n",
            "and and\n",
            "death death\n",
            "becoming become\n",
            "involved involve\n",
            "with with\n",
            "marlo marlo\n",
            "the the\n",
            "two two\n",
            "reunited reunite\n",
            "   \n",
            "jones jones\n",
            "was be\n",
            "temporarily temporarily\n",
            "paralyzed paralyze\n",
            "while while\n",
            "hulk hulk\n",
            "was be\n",
            "the the\n",
            "horseman horseman\n",
            "war war\n",
            "in in\n",
            "an an\n",
            "attempt attempt\n",
            "to to\n",
            "stop stop\n",
            "this this\n",
            "' '\n",
            "war war\n",
            "hulk hulk\n",
            "' '\n",
            "he -PRON-\n",
            "was be\n",
            "thrown throw\n",
            "against against\n",
            "a a\n",
            "pyramid pyramid\n",
            "rick rick\n",
            "was be\n",
            "cured cure\n",
            "during during\n",
            "the the\n",
            "destiny destiny\n",
            "war war\n",
            "summoning summon\n",
            "avengers avenger\n",
            "from from\n",
            "various various\n",
            "realities reality\n",
            "to to\n",
            "battle battle\n",
            "for for\n",
            "their -PRON-\n",
            "very very\n",
            "existence existence\n",
            "against against\n",
            "the the\n",
            "time time\n",
            "keepers keeper\n",
            "the the\n",
            "strain strain\n",
            "was be\n",
            "incredible incredible\n",
            "and and\n",
            "a a\n",
            "future future\n",
            "version version\n",
            "of of\n",
            "genisvell genisvell\n",
            "bonded bond\n",
            "to to\n",
            "him -PRON-\n",
            "much much\n",
            "like like\n",
            "rick rick\n",
            "had have\n",
            "with with\n",
            "marvell marvell\n",
            "rick rick\n",
            "and and\n",
            "genis genis\n",
            "later later\n",
            "discovered discover\n",
            "this this\n",
            "bond bond\n",
            "still still\n",
            "applied apply\n",
            "to to\n",
            "the the\n",
            "current current\n",
            "genis genis\n",
            "   \n",
            "rick rick\n",
            "authored author\n",
            "a a\n",
            "bestselling bestselling\n",
            "novel novel\n",
            "on on\n",
            "his -PRON-\n",
            "days day\n",
            "as as\n",
            "a a\n",
            "sidekick sidekick\n",
            "   \n",
            "when when\n",
            "the the\n",
            "hulk hulk\n",
            "returned return\n",
            "to to\n",
            "earth earth\n",
            "jones jones\n",
            "attempted attempt\n",
            "to to\n",
            "calm calm\n",
            "him -PRON-\n",
            "down down\n",
            "by by\n",
            "telling tell\n",
            "him -PRON-\n",
            "about about\n",
            "captain captain\n",
            "america america\n",
            "'s 's\n",
            "death death\n",
            "but but\n",
            "when when\n",
            "the the\n",
            "hulk hulk\n",
            "almost almost\n",
            "calmed calm\n",
            "down down\n",
            "dr dr\n",
            "strange strange\n",
            "invaded invade\n",
            "the the\n",
            "hulk hulk\n",
            "'s 's\n",
            "mind mind\n",
            "rick rick\n",
            "later later\n",
            "went go\n",
            "to to\n",
            "strange strange\n",
            "'s 's\n",
            "sanctum sanctum\n",
            "sanctorum sanctorum\n",
            "but but\n",
            "was be\n",
            "attacked attack\n",
            "by by\n",
            "the the\n",
            "hulk hulk\n",
            "'s 's\n",
            "allies ally\n",
            "     \n",
            "later later\n",
            "rick rick\n",
            "was be\n",
            "transported transport\n",
            "to to\n",
            "the the\n",
            "gamma gamma\n",
            "bomb bomb\n",
            "site site\n",
            "that that\n",
            "gave give\n",
            "birth birth\n",
            "to to\n",
            "the the\n",
            "original original\n",
            "hulk hulk\n",
            "after after\n",
            "being be\n",
            "dropped drop\n",
            "off off\n",
            "he -PRON-\n",
            "encountered encounter\n",
            "the the\n",
            "red red\n",
            "hulk hulk\n",
            "after after\n",
            "seeing see\n",
            "that that\n",
            "he -PRON-\n",
            "had have\n",
            "murdered murder\n",
            "emil emil\n",
            "blonsky blonsky\n",
            "the the\n",
            "abomination abomination\n",
            "rick rick\n",
            "had have\n",
            "transformed transform\n",
            "into into\n",
            "a a\n",
            "new new\n",
            "blue blue\n",
            "creature creature\n",
            "who who\n",
            "quite quite\n",
            "resembled resemble\n",
            "the the\n",
            "abomination abomination\n",
            "calling call\n",
            "himself -PRON-\n",
            "abomb abomb\n",
            "in in\n",
            "his -PRON-\n",
            "new new\n",
            "form form\n",
            "he -PRON-\n",
            "was be\n",
            "much much\n",
            "like like\n",
            "the the\n",
            "original original\n",
            "hulk hulk\n",
            "incarnation incarnation\n",
            "whereas whereas\n",
            "he -PRON-\n",
            "could could\n",
            "not not\n",
            "remember remember\n",
            "being be\n",
            "anybody anybody\n",
            "else else\n",
            "once once\n",
            "the the\n",
            "transformation transformation\n",
            "was be\n",
            "complete complete\n",
            "had have\n",
            "an an\n",
            "easily easily\n",
            "flared flare\n",
            "temper temper\n",
            "and and\n",
            "simplified simplified\n",
            "speech speech\n",
            "patterns pattern\n",
            "he -PRON-\n",
            "held hold\n",
            "his -PRON-\n",
            "own own\n",
            "against against\n",
            "the the\n",
            "red red\n",
            "hulk hulk\n",
            "for for\n",
            "an an\n",
            "extended extended\n",
            "period period\n",
            "of of\n",
            "time time\n",
            "withstanding withstand\n",
            "all all\n",
            "of of\n",
            "his -PRON-\n",
            "blows blow\n",
            "and and\n",
            "injuring injure\n",
            "him -PRON-\n",
            "multiple multiple\n",
            "times time\n",
            "which which\n",
            "so so\n",
            "far far\n",
            "nobody nobody\n",
            "had have\n",
            "been be\n",
            "able able\n",
            "to to\n",
            "accomplish accomplish\n",
            "the the\n",
            "battle battle\n",
            "was be\n",
            "interrupted interrupt\n",
            "by by\n",
            "several several\n",
            "giant giant\n",
            "android android\n",
            "harpies harpy\n",
            "that that\n",
            "were be\n",
            "specifically specifically\n",
            "designed design\n",
            "by by\n",
            "united united\n",
            "states states\n",
            "military military\n",
            "in in\n",
            "case case\n",
            "bruce bruce\n",
            "banner banner\n",
            "escaped escape\n",
            "the the\n",
            "facility facility\n",
            "as as\n",
            "the the\n",
            "hulk hulk\n",
            "abomb abomb\n",
            "has have\n",
            "proven prove\n",
            "to to\n",
            "hold hold\n",
            "onto onto\n",
            "fragments fragment\n",
            "of of\n",
            "his -PRON-\n",
            "memories memory\n",
            "as as\n",
            "rick rick\n",
            "jones jones\n",
            "because because\n",
            "he -PRON-\n",
            "recognized recognize\n",
            "the the\n",
            "harpies harpy\n",
            "all all\n",
            "had have\n",
            "the the\n",
            "face face\n",
            "of of\n",
            "betty betty\n",
            "ross ross\n",
            "bruce bruce\n",
            "banner banner\n",
            "'s 's\n",
            "first first\n",
            "love love\n",
            "abomb abomb\n",
            "managed manage\n",
            "to to\n",
            "disable disable\n",
            "one one\n",
            "midflight midflight\n",
            "and and\n",
            "they -PRON-\n",
            "both both\n",
            "crashed crash\n",
            "to to\n",
            "earththe earththe\n",
            "robot robot\n",
            "exploded explode\n",
            "   \n",
            "abomb abomb\n",
            "joined join\n",
            "with with\n",
            "several several\n",
            "heroes hero\n",
            "including include\n",
            "the the\n",
            "avengers avenger\n",
            "the the\n",
            "fantastic fantastic\n",
            "four four\n",
            "shehulk shehulk\n",
            "and and\n",
            "the the\n",
            "hulk hulk\n",
            "to to\n",
            "help help\n",
            "stop stop\n",
            "an an\n",
            "impending impend\n",
            "earthquake earthquake\n",
            "in in\n",
            "san san\n",
            "francisco francisco\n",
            "which which\n",
            "was be\n",
            "caused cause\n",
            "by by\n",
            "red red\n",
            "hulk hulk\n",
            "after after\n",
            "the the\n",
            "red red\n",
            "hulk hulk\n",
            "was be\n",
            "defeated defeat\n",
            "abomb abomb\n",
            "reverted revert\n",
            "back back\n",
            "to to\n",
            "rick rick\n",
            "he -PRON-\n",
            "attempted attempt\n",
            "to to\n",
            "reveal reveal\n",
            "who who\n",
            "red red\n",
            "hulk hulk\n",
            "really really\n",
            "was be\n",
            "but but\n",
            "was be\n",
            "shot shoot\n",
            "and and\n",
            "dragged drag\n",
            "away away\n",
            "by by\n",
            "doc doc\n",
            "samson samson\n",
            "from from\n",
            "the the\n",
            "area area\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uF_9gsD9Q2b6"
      },
      "source": [
        "Cool! On remarque que la plupart des mots ont été réduits en leur format simple qui apparait dans le dictionnaire ( used=>use, ran->run)..."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_rX-RU4CEcsu"
      },
      "source": [
        "To-do:\n",
        "Mon idée de prédire le créateur du héro en se basant sur history text. Compléter dans un premier temps l'analyse en utilisant ntlk pour le stemming et implémenter le modèle de prédiction."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jI3Kp804Rhsu"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}